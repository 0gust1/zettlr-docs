{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"5-minutes/","text":"Zettlr in 5 Minutes \u00b6 Okay, you have downloaded and installed the app, got a clock set and are ready to roll? Then hit that countdown button and let's go! 1. Open directories and files \u00b6 To open directories or files, simply drag them anywhere over the app's window. They will be opened automatically. You can also hit Cmd/Ctrl+O to open the directory select dialog, if that's faster for where you're going. 2. Create files and directories \u00b6 After opening a directory, you need a file. Hit Cmd/Ctrl+N to create a new file. Type a file name, hit Return and select the editor. Need another directory? Cmd/Ctrl+Shift+N will do the job. 3. Write! \u00b6 Writing is up to you, but here's the most important keystrokes to remember: Cmd/Ctrl+I : Make text _ italic _. Works just like in Word. Cmd/Ctrl+B : Make text ** bold **. Also works just like in Word. Cmd+Alt+R (macOS) Ctrl+Alt+F (Windows/Linux): Create a footnote. Alt/Ctrl+Click (on a footnote reference): Edit a footnote. Hit Shift+Enter to finish editing. Cmd/Ctrl+K : Insert a link. ( Alt/Ctrl+Click it to open the link.) Cmd/Ctrl+J : Enter the distraction-free mode. Cmd/Ctrl+Alt+L : Toggle the theme between light and dark mode. Things without keystrokes, but also important: Use # -signs to create headings. The number of # -symbols equals the level of the heading. Maximum is 6. Use > -signs to create blockquotes. You can also nest them using multiple greater-than-signs (e.g. > > ). Use # -signs not followed by a space to create tags. You can use these tags for searching and navigating. 4. What else? \u00b6 Move the mouse to the top-left corner of the file list and click the arrow to show the directory tree. Or select the \"extended\" side pane mode to have both the file list and the directory tree visible at once. You can also use both Cmd/Ctrl+1 and Cmd/Ctrl+2 . Zettlr is strictly context-based. Unless otherwise specified, new files and directories will be created inside the currently selected directory. File-based operations (renaming or deleting) will by default target the current file. Use the context menu by right-clicking any file or directory to select specific files/directories. Three simple rules of thumb: The Alt (ernative) key triggers alternative actions on the same element. The Shift modifier key shifts the target of an action to another element (mostly the directory instead of the file). All crucial actions are located in the toolbar. Left are general actions, middle are file-based actions, and to the right are other actions. 5. Nice, I've finished writing. How do I share it? \u00b6 Three easy steps: Make sure Pandoc and LaTeX (only necessary for PDF) are installed. Click the share button in the toolbar (or hit Cmd/Ctrl+E ) and select the target format. The aperture reveals the presentations (they are made using reveal.js \u2014 get the pun?) On export, Zettlr opens the exported file automatically in your preferred app. In there, hit Cmd/Ctrl+Shift+S (should work in most apps) to save it where ever you want. 6. Okay, the 5 mins are over, something else? \u00b6 Nope, you're good to go. If you want to dive deeper, be sure to check out our guides: Zettlr as a note-taking app Zettlr as a Zettelkasten Zettlr as an IDE","title":"Zettlr in 5 Minutes"},{"location":"5-minutes/#zettlr-in-5-minutes","text":"Okay, you have downloaded and installed the app, got a clock set and are ready to roll? Then hit that countdown button and let's go!","title":"Zettlr in 5 Minutes"},{"location":"5-minutes/#1-open-directories-and-files","text":"To open directories or files, simply drag them anywhere over the app's window. They will be opened automatically. You can also hit Cmd/Ctrl+O to open the directory select dialog, if that's faster for where you're going.","title":"1. Open directories and files"},{"location":"5-minutes/#2-create-files-and-directories","text":"After opening a directory, you need a file. Hit Cmd/Ctrl+N to create a new file. Type a file name, hit Return and select the editor. Need another directory? Cmd/Ctrl+Shift+N will do the job.","title":"2. Create files and directories"},{"location":"5-minutes/#3-write","text":"Writing is up to you, but here's the most important keystrokes to remember: Cmd/Ctrl+I : Make text _ italic _. Works just like in Word. Cmd/Ctrl+B : Make text ** bold **. Also works just like in Word. Cmd+Alt+R (macOS) Ctrl+Alt+F (Windows/Linux): Create a footnote. Alt/Ctrl+Click (on a footnote reference): Edit a footnote. Hit Shift+Enter to finish editing. Cmd/Ctrl+K : Insert a link. ( Alt/Ctrl+Click it to open the link.) Cmd/Ctrl+J : Enter the distraction-free mode. Cmd/Ctrl+Alt+L : Toggle the theme between light and dark mode. Things without keystrokes, but also important: Use # -signs to create headings. The number of # -symbols equals the level of the heading. Maximum is 6. Use > -signs to create blockquotes. You can also nest them using multiple greater-than-signs (e.g. > > ). Use # -signs not followed by a space to create tags. You can use these tags for searching and navigating.","title":"3. Write!"},{"location":"5-minutes/#4-what-else","text":"Move the mouse to the top-left corner of the file list and click the arrow to show the directory tree. Or select the \"extended\" side pane mode to have both the file list and the directory tree visible at once. You can also use both Cmd/Ctrl+1 and Cmd/Ctrl+2 . Zettlr is strictly context-based. Unless otherwise specified, new files and directories will be created inside the currently selected directory. File-based operations (renaming or deleting) will by default target the current file. Use the context menu by right-clicking any file or directory to select specific files/directories. Three simple rules of thumb: The Alt (ernative) key triggers alternative actions on the same element. The Shift modifier key shifts the target of an action to another element (mostly the directory instead of the file). All crucial actions are located in the toolbar. Left are general actions, middle are file-based actions, and to the right are other actions.","title":"4. What else?"},{"location":"5-minutes/#5-nice-ive-finished-writing-how-do-i-share-it","text":"Three easy steps: Make sure Pandoc and LaTeX (only necessary for PDF) are installed. Click the share button in the toolbar (or hit Cmd/Ctrl+E ) and select the target format. The aperture reveals the presentations (they are made using reveal.js \u2014 get the pun?) On export, Zettlr opens the exported file automatically in your preferred app. In there, hit Cmd/Ctrl+Shift+S (should work in most apps) to save it where ever you want.","title":"5. Nice, I've finished writing. How do I share it?"},{"location":"5-minutes/#6-okay-the-5-mins-are-over-something-else","text":"Nope, you're good to go. If you want to dive deeper, be sure to check out our guides: Zettlr as a note-taking app Zettlr as a Zettelkasten Zettlr as an IDE","title":"6. Okay, the 5 mins are over, something else?"},{"location":"citations/","text":"Citing with Zettlr \u00b6 Starting with version 1.0.0 , it's possible to cite sources directly using Zettlr. This feature makes writing academic papers a lot easier than in the past, because you don't need to circumvent the Zettlr export function to actually cite academic papers anymore, but use it directly! Citing in Zettlr is done using citeproc-js , a library that works exactly like, for instance, pandoc's citeproc-engine, or Zotero. So what you will be seeing in Zettlr matches what Zotero's Word or LibreOffice plugins generate. Zettlr's citation engine is composed of three components: A CSL JSON library which contains all items that can be cited, optionally a CSL Stylesheet which can alter Zettlr's default citation style (which is the American Psychological Association's 6th edition , short: APA), and a preview engine. This guide will help you enable citations and produce beautifully looking files (not just PDF!) that contain correct and consistent citations. Enabling Citations in Zettlr \u00b6 There are two different engines that belong to the realm of citing: the previews (citations can be previewed just as images or links) and the actual process of generating citations (which happens only on export). Both of these functions are triggered by selecting a CSL JSON library that contains references. Without such a library, Zettlr will still \"preview\" citations (so that you can see what will trigger pandoc's citeproc), but Zettlr won't replace the citation's contents with a generated citation. Also, if you do not specify such a library, Zettlr will not run Pandoc with its citeproc-engine, and therefore will not parse the citations. So the first step is to create such a file. Zotero is the recommended application for managing your library, so this tutorial will assume you use Zotero. If you use another program, please check out how to export from your software to the CSL JSON format. Step 1: Install BetterBibTex \u00b6 The first step is to install the BetterBibTex-plugin for Zotero . This plugin's main benefit is that it keeps your citation IDs unique throughout your entire library. Each citation item has its own unique ID. This is necessary so that when you, for instance, realise that the publication date has been saved wrong, you can easily change it in Zotero and afterwards citeproc will use the corrected information. If you do not use BetterBibTex, it may always happen that an ID is issued multiple times, which would either generate errors (the good way, because you know there's something wrong) or simply use the first item that matches this ID (the bad way, because this way you'd have to be lucky to spot the wrong citation after export). After you've installed BetterBibTex, you may want to play around a little bit with the settings (for instance in how the IDs are generated). Attention! There are two undocumented behaviours in BetterBibTex. First, the available variables you can use to generate your own citation IDs. They are only documented in the JabRef documentation, which you can find here . The second behaviour is that BetterBibTex will automatically use letters from a to z to make citations from the same author in the same year unique (e.g. you'll have something like Harvey2005a , Harvey2005b , Harvey2005c , and so forth). Step 2: Export your library \u00b6 The next step is to actually export your library. Zotero's task is to manage your references, but to cite them is another task, which is done by citeproc. And citeproc needs a separate file for that. To export such a library that both Zettlr and pandoc's citeproc can use, first select the collection you want to export in the left sidebar. To always have all your items at your disposal and to prevent having to export multiple different libraries, you can select your entire library. ( As a measure: We've run tests with a library containing about 700 items, and we have not experienced any performance issues. ) Next, click on File and select Export library \u2026 . As the format, select Better CSL JSON (if you opted against installing BetterBibTex you may choose CSL JSON ). If you check the checkbox labeled \"Keep updated\", BetterBibTex will make sure that every change in Zotero will automatically be exported to the file, keeping it in sync with Zotero (and, therefore, transmit your changes automatically to Zettlr, which in turn will always cite correctly). If you ticked the checkbox, you can check the status of the library file by opening the Zotero Preferences, selecting the BetterBibTex -tab, and selecting Automatic Export , which allows you to further finetune what is exported, and when. Step 3: Open your library in Zettlr \u00b6 Now it is time to import your library to Zettlr. To do so, simply open Zettlr's preferences, go to the Export -tab and click the small folder-icon right to the CSL JSON Database -input field. A dialog will appear that lets you navigate to your database file. Select it, save the preferences and Zettlr will automatically load the database. Now you are ready to cite! Citing in Zettlr \u00b6 Citing in Zettlr is very easy. Zettlr supports pandoc's citeproc-syntax for writing citations, so you'll have two options on how to write citations. First, you can simply throw a single identifier somewhere in your text to simply render a citation for this key. It should look like this: @Harvey2005a . All citation keys begin with an @ followed by the citation key. Zettlr has an autocomplete-feature that will prompt you with a selection of all available citation keys as soon as you type an @ -character. This is a first check if you're using the correct ID: If Zettlr doesn't offer you anything, the ID has probably not been found in the library file. But normally you'll want to be somewhat more specific, add a certain page range or something like that to your citation. That is what the more extended square-bracket citation is for. To cite in this way simply use square brackets. A citation with a so-called prefix and a page-range would look like this: [See @Harvey2005a, 45-51] To cite multiple authors, simply divide the blocks with semicolons: [See @Harvey2005a, 45-51; also @Ciepley2007, 8-9] For more information on how to use citations in line with pandoc's citeproc engine, please refer to the guide . Please note that Zettlr's citeproc-engine is only for preview purposes . For simplicity reasons, Zettlr does not perfectly parse all citations and will therefore lack some precision. You can be sure that pandoc's citeproc will do the job correctly on export. Therefore, the preview citations are only to check that your citations are detected correctly so you won't have missing citations on export . Checking the references \u00b6 After you're done citing and want to check that you've cited everything you planned to, you can open the Attachment Sidebar (Shortcut: Ctrl/Cmd+3 ). Beneath all files that are in your currently selected directory, Zettlr will display a list of all references it has found in your current file. If something's missing from there, it's probably not been cited in your file. Changing the citation style \u00b6 Internally, Zettlr will always only use the APA-style to generate citations. Therefore, your previewed citations will always be \"in-text,\" and never in footnote-style. This is meant as a convenience for you to simply see that everything works out. But of course you can also use different citation styles, depending on either the journal requirements for which you are writing, or your personal preferences. To change the style in which pandoc's citeproc will render your citations, you'll need to download the respective CSL-file. A very good starting point is the Zotero style repository . There you can search for specific citation styles, preview them and download them. You can point Zettlr to such CSL-files at two obvious points. First in the general preferences. In the Export -tab, beneath the field for your citation database file, you can select your preferred CSL-style which will then be used for all single-page exports that you export using the toolbar button. But obviously, for projects you may want to use a different CSL-style. Therefore, if you open any project's preferences, you can select a CSL-file as well. The project will then use this on export. Formatting the List of References \u00b6 Of course, as soon as you cite reference works in your files, you'll want the references to be formatted neatly. If you export to Word or LibreOffice, you can change the respective formatting styles as you edit your file before sending it out. But as soon as you export to PDF, this won't be possible. And as pandoc-citeproc simply glues all your references to the end of the document with no formatting whatsoever, you'll need to perform a little trick to make the references list look nicely. LaTeX uses lengths to determine the overall measurements of the exported PDF. These lengths are normally set globally, but can be transformed during the course of the source file. One of these lengths is parindent , which controls the hanging indent of all paragraphs. There are additional lengths for when paragraphs follow a heading, for example, but we won't be concerned with these for now. The parindent -variable can be set using Zettlr's PDF-options, but it will only be set globally for all paragraphs. As the references are also formatted using general paragraph styles, they will be indented in the same manner as all other paragraphs. But there's a small trick you can use to make the bibliography look nice: simply overwrite the paragraph lengths after your document, that is: after the heading ## References (or however you call it in your file). Simply re-set them to what looks nicely to you. The following code snippet gives you an example: \\setlength{\\parindent}{-1cm} % Negative hanging indent \\setlength{\\leftskip}{0.5cm} % Overall indentation \\setlength{\\parskip}{0.1cm} % Spacing between paragraphs The above example would render the bibliography with a negative indentation of minus one centimetre. Additionally it'll apply an overall indentation of half a centimetre (relative to the page margins, so if your left page margin is set to 3 centimetres, the bibliography paragraphs will be offset 3.5 centimetres as opposed to the normal paragraphs, which are offset only 3 centimetres). The last value ( parskip ) controls the spacing between paragraphs, so each one will be 10 millimetres away from each other. Simply start from there, maybe search for more lengths to tweak and adjust these lengths to your liking.","title":"Citing with Zettlr"},{"location":"citations/#citing-with-zettlr","text":"Starting with version 1.0.0 , it's possible to cite sources directly using Zettlr. This feature makes writing academic papers a lot easier than in the past, because you don't need to circumvent the Zettlr export function to actually cite academic papers anymore, but use it directly! Citing in Zettlr is done using citeproc-js , a library that works exactly like, for instance, pandoc's citeproc-engine, or Zotero. So what you will be seeing in Zettlr matches what Zotero's Word or LibreOffice plugins generate. Zettlr's citation engine is composed of three components: A CSL JSON library which contains all items that can be cited, optionally a CSL Stylesheet which can alter Zettlr's default citation style (which is the American Psychological Association's 6th edition , short: APA), and a preview engine. This guide will help you enable citations and produce beautifully looking files (not just PDF!) that contain correct and consistent citations.","title":"Citing with Zettlr"},{"location":"citations/#enabling-citations-in-zettlr","text":"There are two different engines that belong to the realm of citing: the previews (citations can be previewed just as images or links) and the actual process of generating citations (which happens only on export). Both of these functions are triggered by selecting a CSL JSON library that contains references. Without such a library, Zettlr will still \"preview\" citations (so that you can see what will trigger pandoc's citeproc), but Zettlr won't replace the citation's contents with a generated citation. Also, if you do not specify such a library, Zettlr will not run Pandoc with its citeproc-engine, and therefore will not parse the citations. So the first step is to create such a file. Zotero is the recommended application for managing your library, so this tutorial will assume you use Zotero. If you use another program, please check out how to export from your software to the CSL JSON format.","title":"Enabling Citations in Zettlr"},{"location":"citations/#step-1-install-betterbibtex","text":"The first step is to install the BetterBibTex-plugin for Zotero . This plugin's main benefit is that it keeps your citation IDs unique throughout your entire library. Each citation item has its own unique ID. This is necessary so that when you, for instance, realise that the publication date has been saved wrong, you can easily change it in Zotero and afterwards citeproc will use the corrected information. If you do not use BetterBibTex, it may always happen that an ID is issued multiple times, which would either generate errors (the good way, because you know there's something wrong) or simply use the first item that matches this ID (the bad way, because this way you'd have to be lucky to spot the wrong citation after export). After you've installed BetterBibTex, you may want to play around a little bit with the settings (for instance in how the IDs are generated). Attention! There are two undocumented behaviours in BetterBibTex. First, the available variables you can use to generate your own citation IDs. They are only documented in the JabRef documentation, which you can find here . The second behaviour is that BetterBibTex will automatically use letters from a to z to make citations from the same author in the same year unique (e.g. you'll have something like Harvey2005a , Harvey2005b , Harvey2005c , and so forth).","title":"Step 1: Install BetterBibTex"},{"location":"citations/#step-2-export-your-library","text":"The next step is to actually export your library. Zotero's task is to manage your references, but to cite them is another task, which is done by citeproc. And citeproc needs a separate file for that. To export such a library that both Zettlr and pandoc's citeproc can use, first select the collection you want to export in the left sidebar. To always have all your items at your disposal and to prevent having to export multiple different libraries, you can select your entire library. ( As a measure: We've run tests with a library containing about 700 items, and we have not experienced any performance issues. ) Next, click on File and select Export library \u2026 . As the format, select Better CSL JSON (if you opted against installing BetterBibTex you may choose CSL JSON ). If you check the checkbox labeled \"Keep updated\", BetterBibTex will make sure that every change in Zotero will automatically be exported to the file, keeping it in sync with Zotero (and, therefore, transmit your changes automatically to Zettlr, which in turn will always cite correctly). If you ticked the checkbox, you can check the status of the library file by opening the Zotero Preferences, selecting the BetterBibTex -tab, and selecting Automatic Export , which allows you to further finetune what is exported, and when.","title":"Step 2: Export your library"},{"location":"citations/#step-3-open-your-library-in-zettlr","text":"Now it is time to import your library to Zettlr. To do so, simply open Zettlr's preferences, go to the Export -tab and click the small folder-icon right to the CSL JSON Database -input field. A dialog will appear that lets you navigate to your database file. Select it, save the preferences and Zettlr will automatically load the database. Now you are ready to cite!","title":"Step 3: Open your library in Zettlr"},{"location":"citations/#citing-in-zettlr","text":"Citing in Zettlr is very easy. Zettlr supports pandoc's citeproc-syntax for writing citations, so you'll have two options on how to write citations. First, you can simply throw a single identifier somewhere in your text to simply render a citation for this key. It should look like this: @Harvey2005a . All citation keys begin with an @ followed by the citation key. Zettlr has an autocomplete-feature that will prompt you with a selection of all available citation keys as soon as you type an @ -character. This is a first check if you're using the correct ID: If Zettlr doesn't offer you anything, the ID has probably not been found in the library file. But normally you'll want to be somewhat more specific, add a certain page range or something like that to your citation. That is what the more extended square-bracket citation is for. To cite in this way simply use square brackets. A citation with a so-called prefix and a page-range would look like this: [See @Harvey2005a, 45-51] To cite multiple authors, simply divide the blocks with semicolons: [See @Harvey2005a, 45-51; also @Ciepley2007, 8-9] For more information on how to use citations in line with pandoc's citeproc engine, please refer to the guide . Please note that Zettlr's citeproc-engine is only for preview purposes . For simplicity reasons, Zettlr does not perfectly parse all citations and will therefore lack some precision. You can be sure that pandoc's citeproc will do the job correctly on export. Therefore, the preview citations are only to check that your citations are detected correctly so you won't have missing citations on export .","title":"Citing in Zettlr"},{"location":"citations/#checking-the-references","text":"After you're done citing and want to check that you've cited everything you planned to, you can open the Attachment Sidebar (Shortcut: Ctrl/Cmd+3 ). Beneath all files that are in your currently selected directory, Zettlr will display a list of all references it has found in your current file. If something's missing from there, it's probably not been cited in your file.","title":"Checking the references"},{"location":"citations/#changing-the-citation-style","text":"Internally, Zettlr will always only use the APA-style to generate citations. Therefore, your previewed citations will always be \"in-text,\" and never in footnote-style. This is meant as a convenience for you to simply see that everything works out. But of course you can also use different citation styles, depending on either the journal requirements for which you are writing, or your personal preferences. To change the style in which pandoc's citeproc will render your citations, you'll need to download the respective CSL-file. A very good starting point is the Zotero style repository . There you can search for specific citation styles, preview them and download them. You can point Zettlr to such CSL-files at two obvious points. First in the general preferences. In the Export -tab, beneath the field for your citation database file, you can select your preferred CSL-style which will then be used for all single-page exports that you export using the toolbar button. But obviously, for projects you may want to use a different CSL-style. Therefore, if you open any project's preferences, you can select a CSL-file as well. The project will then use this on export.","title":"Changing the citation style"},{"location":"citations/#formatting-the-list-of-references","text":"Of course, as soon as you cite reference works in your files, you'll want the references to be formatted neatly. If you export to Word or LibreOffice, you can change the respective formatting styles as you edit your file before sending it out. But as soon as you export to PDF, this won't be possible. And as pandoc-citeproc simply glues all your references to the end of the document with no formatting whatsoever, you'll need to perform a little trick to make the references list look nicely. LaTeX uses lengths to determine the overall measurements of the exported PDF. These lengths are normally set globally, but can be transformed during the course of the source file. One of these lengths is parindent , which controls the hanging indent of all paragraphs. There are additional lengths for when paragraphs follow a heading, for example, but we won't be concerned with these for now. The parindent -variable can be set using Zettlr's PDF-options, but it will only be set globally for all paragraphs. As the references are also formatted using general paragraph styles, they will be indented in the same manner as all other paragraphs. But there's a small trick you can use to make the bibliography look nice: simply overwrite the paragraph lengths after your document, that is: after the heading ## References (or however you call it in your file). Simply re-set them to what looks nicely to you. The following code snippet gives you an example: \\setlength{\\parindent}{-1cm} % Negative hanging indent \\setlength{\\leftskip}{0.5cm} % Overall indentation \\setlength{\\parskip}{0.1cm} % Spacing between paragraphs The above example would render the bibliography with a negative indentation of minus one centimetre. Additionally it'll apply an overall indentation of half a centimetre (relative to the page margins, so if your left page margin is set to 3 centimetres, the bibliography paragraphs will be offset 3.5 centimetres as opposed to the normal paragraphs, which are offset only 3 centimetres). The last value ( parskip ) controls the spacing between paragraphs, so each one will be 10 millimetres away from each other. Simply start from there, maybe search for more lengths to tweak and adjust these lengths to your liking.","title":"Formatting the List of References"},{"location":"components/","text":"Components \u00b6","title":"Components"},{"location":"components/#components","text":"","title":"Components"},{"location":"custom-css/","text":"Custom CSS \u00b6 Since Zettlr version 1.1 it is possible to use custom CSS ( Cascading Style Sheets ) to modify the complete appearance of the app. It's been a long requested feature, and it will open up many possibilities to customising the app (and maybe even the first truly user-generated content of the app?) You can find the Custom CSS editor under Zettlr->Custom CSS\u2026 (macOS) or under File->Custom CSS\u2026 (Windows and Linux) If you are unfamiliar with CSS, but don't want to simply copy & paste the guides on this page, you may choose to follow a short tutorial on CSS ! There are many on the internet, so a quick Google search can also provide you with video tutorials, if you prefer those! Below you can first find a general introduction in writing CSS, before I will list some examples that you can easily copy & paste to adapt your app to look differently. At the end of the page you may find a complete class reference . Writing CSS for Zettlr \u00b6 If you don't want to write CSS for yourself and are only looking to change the font , head over to the next section! Zettlr comes with a lot of predefined classes and IDs. It follows the generally-acknowledged wisdom not to make use of style -tags to directly define properties. Therefore, you can use classes for literally anything. The styles of Zettlr are divided into both geometry and the actual theme, so you may want to stick with only changing the design of elements without changing any geometry. Playing around with the geometry may be fun, but it may yield completely random behaviour, as some parts of the app depend upon the correct sizes of elements. In case you made a mistake, don't worry: Simply remove the custom.css -file from the data directory of Zettlr. You can find the data directory of your own system by looking at the paths provided in the install documentation . Classes and IDs in Zettlr are always namespaced to the respective components (unless they're global), so to really override a rule you will have to use the complete namespace (or, if you don't want to add many rules and are lazy, use the !important override rule). Everything is always namespaced to the body , which has a class .dark if the app is currently in dark mode. So to make sure a certain rule only applies while the app is in dark mode, make sure to prefix it with body.dark ! At the bottom of this page you may find a full class and ID reference so that you don't have to poke around in the app forever! (I already apologise, for it is only a simple dump generated from Zettlr's precompiled CSS files.) CSS Code Snippets \u00b6 Using a Custom Font with Zettlr \u00b6 In case you do not like the default font delivered with Zettlr, or need to change it, simply paste the following code snippet into the custom CSS editor. Replace your-font-name with the full name of the font you want to use for Zettlr. Please replace placeholder according to the font: In case you want to use a serif font, such as Times New Roman, or Georgia, please use serif In case your font is sans serif , such as Arial or Helvetica, please use sans-serif In case you want to switch to the classic monospace , please use the placeholder monospace The placeholder will make sure that even if your font cannot be found, an equivalent font will be used. It serves as a fallback. Zettlr already ships a serif font, a sans-serif font and a monospace font! To use the bundled fonts, you can use Crimson for a modern serif font or Liberation Mono for a nice looking monospace font. (Lato is the default, so you probably don't want to put it there.) #editor { font-family: '<your-font-name here>', <placeholder>; } Random Unsplash Background Images \u00b6 With the following code, you can make your editor have a different background image everytime you start it. The images are taken from Unsplash.com, a nice site with free photos. It uses the Source API , which will simply spit out a different image every time the URL is visited. You can test it out by simply visiting the page and refreshing a few times ! Please refer to the Unsplash Source API reference for more options (such as using an image of the day). /* Enter your custom CSS here */ #editor { background-color: transparent; background-image: url('https://source.unsplash.com/random'); background-size: cover; background-position: center center; } body #editor .CodeMirror-sizer, body #editor .CodeMirror-gutter { background-color: rgba(255, 255, 255, .8); height: 100%; } body.dark #editor .CodeMirror-sizer, body.dark #editor .CodeMirror-gutter { background-color: rgba(0, 0, 0, .8); } #editor .CodeMirror { background-color: transparent; } Visualising Line Endings \u00b6 In case you want to see where your linefeeds are, you can display the pilcrow symbol (\u00b6) at the end of your lines by using the following Custom CSS: .CodeMirror-line:not(:last-child)::after { content: \"\u00b6\"; color: #666; } Hide the Toolbar in Distraction Free \u00b6 Some people prefer the distraction free mode to be really distraction-free. Zettlr does not hide the toolbar by default, because most people want to have access to all the tools and buttons even when writing distraction free. Still, if you belong to the group of people who prefer distraction free to be only the editor itself, rejoice! Hiding the toolbar in distraction free mode is as easy as one single line of CSS! Simply paste the following line of CSS into the Custom CSS dialog, and from then on the toolbar will always be hidden: #editor.fullscreen, .CodeMirror-fullscreen { top: 0px; } Your Ideas \u00b6 Do you have nice ideas for how to style Zettlr even more? If you have a good CSS snippet that works out of the box, feel free to share it with us so that we can feature it here! Complete CSS Class and ID Reference \u00b6 Below you can find the full and non-abbreviated list of all CSS classes and IDs. We've counted, it's over 300 at the moment. Please note that we used an external package to extract the class names. We have already removed most of non-classes (such as colours and \"dot-noted\" values such as .5% ) but we do not give any guarantee that we found all. Warning: The following list of reference may change in the future! So a class that has worked in one version of Zettlr may stop to work in another, because of changes to either the DOM or the class/ID name. .eot #iefix .ttf .woff2 .otf .woff .dragger .clearfix .modal .dialog .uuid .image-preview .button .request-file .file-select-group .changelog .code .clear .box-left .box-right .paper .a4paper .popup .set-target .bmargin .lmargin .rmargin .tmargin .image-size .image .png #directories #imageWidth #imageHeight #preview-image-sizes .pdf-preview .error .projects #prefs-taglist .flex #next-sheet #prev-sheet .ui-tabs-nav .ui-tabs-tab .dicts-list .dicts-list-item .dicts-list-search .selected-dict .hidden #directories-dirs-header #directories-files-header #preview .file .collapse-indicator .collapsed .project .virtual-directory .emptyPaths .info .clusterize-scroll .clusterize-extra-row #editor .ui-resizable-autohide .ui-resizable-handle .ui-resizable-disabled .clusterize-keep-parity .clusterize-content .clusterize-no-data .snippets .filename .snippet .date .directories .files .id .tags .tex-indicator .virtual-directories .target-progress-indicator .taglist .tag .tagspacer .directory .sorter .sortName .sortTime #combiner .expanded #arrow-button .fullscreen .ui-resizable-w .CodeMirror .CodeMirror-code .mute .CodeMirror-scroll .CodeMirror-fullscreen .CodeMirror-vscrollbar .CodeMirror-sizer .cma .search-result .cm-table .size-header-1 .pomodoro .CodeMirror-gutter-elt .size-header-2 .size-header-3 .size-header-4 .size-header-5 .size-header-6 .cm-comment .cm-fenced-code .cm-formatting-task .CodeMirror-cursor .cm-escape-char .cm-formatting-code .cm-formatting-code-block .cm-formatting-em .cm-formatting-quote .cm-formatting-strong .cm-formatting-list-ol .cm-formatting-list-ul .cm-link .cm-url .shift .cm-zkn-tag .cm-zkn-link .CodeMirror-gutters .CodeMirror-foldgutter .CodeMirror-foldgutter-folded .CodeMirror-foldgutter-open .heading-tag .CodeMirror-foldmarker .CodeMirror-hints .CodeMirror-hint .cm-hint-colour .print-window .quicklook .quicklook-standalone #init-print .minimize .title .find .body .ui-resizable-n .ui-resizable-s .ui-resizable-e .ui-resizable-se .ui-resizable-sw .ui-resizable-nw .ui-resizable-ne .close .make-standalone #toolbar .content .darwin .win32 .linux .file-info .searchbar #search-progress-indicator .menu-popup .dir-open .directory-new .file-new .stats .tag-cloud .preferences .recent-docs .file-save .file-delete .file-rename .formatting .share .show-toc .toggle-attachments .spacer .separator .end-search .notify .popup-arrow .down .up .left .right .toc-link .footnote-edit .search .small #header-formatting .row .btn-share .htm .docx .odt .plain .tex .pdf #attachments #open-dir-external .revealjs .revealjs-beige .revealjs-black .revealjs-league .revealjs-moon .revealjs-serif .revealjs-sky .revealjs-solarized .revealjs-white .rst .rtf .org .textile .mediawiki #reveal-themes .markdownHeading1 .markdownHeading2 .markdownHeading3 .markdownHeading4 .markdownHeading5 .markdownHeading6 .markdownBlockquote .markdownLink .markdownImage .markdownCode .markdownMakeOrderedList .markdownMakeUnorderedList .markdownDivider .insertFootnote .markdownBold .markdownItalic .removeFootnote #searchNext #replaceNext #replaceAll .csl-bib-body .csl-entry .cb-toggle .radio-toggle .toggle .cb-group .linux-window-controls .windows-window-controls .minimise .resize .maximise .cm-meta .cm-def .sb-annotation .cm-stex-mode .cm-css-mode .cm-attribute .cm-builtin .cm-string .cm-string-2 .cm-variable .cm-variable-2 .cm-keyword .cm-property .cm-type .cm-atom .cm-number .CodeMirror-selected .cm-tag .cm-bracket .cm-formatting-header-1 .cm-formatting-header-2 .cm-formatting-header-3 .cm-formatting-header-4 .cm-formatting-header-5 .cm-formatting-header-6 .cm-quote .cm-strong .cm-em .cm-spell-error .cm-zkn-id .citeproc-citation .cm-hr .CodeMirror-guttermarker-subtle .CodeMirror-hint-active .selected .highlight .vd-file .excerpt .active .pomodoro-task .pomodoro-short .pomodoro-long .pomodoro-meter .pomodoro-value .task .short .long .indicator-meter .indicator-value .error-info .has-error .form-inline-buttons .prefs-submit-group .ui-tabs-active .dark .CodeMirror-dialog .cm-formatting-escape .maximise-svg","title":"Custom CSS"},{"location":"custom-css/#custom-css","text":"Since Zettlr version 1.1 it is possible to use custom CSS ( Cascading Style Sheets ) to modify the complete appearance of the app. It's been a long requested feature, and it will open up many possibilities to customising the app (and maybe even the first truly user-generated content of the app?) You can find the Custom CSS editor under Zettlr->Custom CSS\u2026 (macOS) or under File->Custom CSS\u2026 (Windows and Linux) If you are unfamiliar with CSS, but don't want to simply copy & paste the guides on this page, you may choose to follow a short tutorial on CSS ! There are many on the internet, so a quick Google search can also provide you with video tutorials, if you prefer those! Below you can first find a general introduction in writing CSS, before I will list some examples that you can easily copy & paste to adapt your app to look differently. At the end of the page you may find a complete class reference .","title":"Custom CSS"},{"location":"custom-css/#writing-css-for-zettlr","text":"If you don't want to write CSS for yourself and are only looking to change the font , head over to the next section! Zettlr comes with a lot of predefined classes and IDs. It follows the generally-acknowledged wisdom not to make use of style -tags to directly define properties. Therefore, you can use classes for literally anything. The styles of Zettlr are divided into both geometry and the actual theme, so you may want to stick with only changing the design of elements without changing any geometry. Playing around with the geometry may be fun, but it may yield completely random behaviour, as some parts of the app depend upon the correct sizes of elements. In case you made a mistake, don't worry: Simply remove the custom.css -file from the data directory of Zettlr. You can find the data directory of your own system by looking at the paths provided in the install documentation . Classes and IDs in Zettlr are always namespaced to the respective components (unless they're global), so to really override a rule you will have to use the complete namespace (or, if you don't want to add many rules and are lazy, use the !important override rule). Everything is always namespaced to the body , which has a class .dark if the app is currently in dark mode. So to make sure a certain rule only applies while the app is in dark mode, make sure to prefix it with body.dark ! At the bottom of this page you may find a full class and ID reference so that you don't have to poke around in the app forever! (I already apologise, for it is only a simple dump generated from Zettlr's precompiled CSS files.)","title":"Writing CSS for Zettlr"},{"location":"custom-css/#css-code-snippets","text":"","title":"CSS Code Snippets"},{"location":"custom-css/#using-a-custom-font-with-zettlr","text":"In case you do not like the default font delivered with Zettlr, or need to change it, simply paste the following code snippet into the custom CSS editor. Replace your-font-name with the full name of the font you want to use for Zettlr. Please replace placeholder according to the font: In case you want to use a serif font, such as Times New Roman, or Georgia, please use serif In case your font is sans serif , such as Arial or Helvetica, please use sans-serif In case you want to switch to the classic monospace , please use the placeholder monospace The placeholder will make sure that even if your font cannot be found, an equivalent font will be used. It serves as a fallback. Zettlr already ships a serif font, a sans-serif font and a monospace font! To use the bundled fonts, you can use Crimson for a modern serif font or Liberation Mono for a nice looking monospace font. (Lato is the default, so you probably don't want to put it there.) #editor { font-family: '<your-font-name here>', <placeholder>; }","title":"Using a Custom Font with Zettlr"},{"location":"custom-css/#random-unsplash-background-images","text":"With the following code, you can make your editor have a different background image everytime you start it. The images are taken from Unsplash.com, a nice site with free photos. It uses the Source API , which will simply spit out a different image every time the URL is visited. You can test it out by simply visiting the page and refreshing a few times ! Please refer to the Unsplash Source API reference for more options (such as using an image of the day). /* Enter your custom CSS here */ #editor { background-color: transparent; background-image: url('https://source.unsplash.com/random'); background-size: cover; background-position: center center; } body #editor .CodeMirror-sizer, body #editor .CodeMirror-gutter { background-color: rgba(255, 255, 255, .8); height: 100%; } body.dark #editor .CodeMirror-sizer, body.dark #editor .CodeMirror-gutter { background-color: rgba(0, 0, 0, .8); } #editor .CodeMirror { background-color: transparent; }","title":"Random Unsplash Background Images"},{"location":"custom-css/#visualising-line-endings","text":"In case you want to see where your linefeeds are, you can display the pilcrow symbol (\u00b6) at the end of your lines by using the following Custom CSS: .CodeMirror-line:not(:last-child)::after { content: \"\u00b6\"; color: #666; }","title":"Visualising Line Endings"},{"location":"custom-css/#hide-the-toolbar-in-distraction-free","text":"Some people prefer the distraction free mode to be really distraction-free. Zettlr does not hide the toolbar by default, because most people want to have access to all the tools and buttons even when writing distraction free. Still, if you belong to the group of people who prefer distraction free to be only the editor itself, rejoice! Hiding the toolbar in distraction free mode is as easy as one single line of CSS! Simply paste the following line of CSS into the Custom CSS dialog, and from then on the toolbar will always be hidden: #editor.fullscreen, .CodeMirror-fullscreen { top: 0px; }","title":"Hide the Toolbar in Distraction Free"},{"location":"custom-css/#your-ideas","text":"Do you have nice ideas for how to style Zettlr even more? If you have a good CSS snippet that works out of the box, feel free to share it with us so that we can feature it here!","title":"Your Ideas"},{"location":"custom-css/#complete-css-class-and-id-reference","text":"Below you can find the full and non-abbreviated list of all CSS classes and IDs. We've counted, it's over 300 at the moment. Please note that we used an external package to extract the class names. We have already removed most of non-classes (such as colours and \"dot-noted\" values such as .5% ) but we do not give any guarantee that we found all. Warning: The following list of reference may change in the future! So a class that has worked in one version of Zettlr may stop to work in another, because of changes to either the DOM or the class/ID name. .eot #iefix .ttf .woff2 .otf .woff .dragger .clearfix .modal .dialog .uuid .image-preview .button .request-file .file-select-group .changelog .code .clear .box-left .box-right .paper .a4paper .popup .set-target .bmargin .lmargin .rmargin .tmargin .image-size .image .png #directories #imageWidth #imageHeight #preview-image-sizes .pdf-preview .error .projects #prefs-taglist .flex #next-sheet #prev-sheet .ui-tabs-nav .ui-tabs-tab .dicts-list .dicts-list-item .dicts-list-search .selected-dict .hidden #directories-dirs-header #directories-files-header #preview .file .collapse-indicator .collapsed .project .virtual-directory .emptyPaths .info .clusterize-scroll .clusterize-extra-row #editor .ui-resizable-autohide .ui-resizable-handle .ui-resizable-disabled .clusterize-keep-parity .clusterize-content .clusterize-no-data .snippets .filename .snippet .date .directories .files .id .tags .tex-indicator .virtual-directories .target-progress-indicator .taglist .tag .tagspacer .directory .sorter .sortName .sortTime #combiner .expanded #arrow-button .fullscreen .ui-resizable-w .CodeMirror .CodeMirror-code .mute .CodeMirror-scroll .CodeMirror-fullscreen .CodeMirror-vscrollbar .CodeMirror-sizer .cma .search-result .cm-table .size-header-1 .pomodoro .CodeMirror-gutter-elt .size-header-2 .size-header-3 .size-header-4 .size-header-5 .size-header-6 .cm-comment .cm-fenced-code .cm-formatting-task .CodeMirror-cursor .cm-escape-char .cm-formatting-code .cm-formatting-code-block .cm-formatting-em .cm-formatting-quote .cm-formatting-strong .cm-formatting-list-ol .cm-formatting-list-ul .cm-link .cm-url .shift .cm-zkn-tag .cm-zkn-link .CodeMirror-gutters .CodeMirror-foldgutter .CodeMirror-foldgutter-folded .CodeMirror-foldgutter-open .heading-tag .CodeMirror-foldmarker .CodeMirror-hints .CodeMirror-hint .cm-hint-colour .print-window .quicklook .quicklook-standalone #init-print .minimize .title .find .body .ui-resizable-n .ui-resizable-s .ui-resizable-e .ui-resizable-se .ui-resizable-sw .ui-resizable-nw .ui-resizable-ne .close .make-standalone #toolbar .content .darwin .win32 .linux .file-info .searchbar #search-progress-indicator .menu-popup .dir-open .directory-new .file-new .stats .tag-cloud .preferences .recent-docs .file-save .file-delete .file-rename .formatting .share .show-toc .toggle-attachments .spacer .separator .end-search .notify .popup-arrow .down .up .left .right .toc-link .footnote-edit .search .small #header-formatting .row .btn-share .htm .docx .odt .plain .tex .pdf #attachments #open-dir-external .revealjs .revealjs-beige .revealjs-black .revealjs-league .revealjs-moon .revealjs-serif .revealjs-sky .revealjs-solarized .revealjs-white .rst .rtf .org .textile .mediawiki #reveal-themes .markdownHeading1 .markdownHeading2 .markdownHeading3 .markdownHeading4 .markdownHeading5 .markdownHeading6 .markdownBlockquote .markdownLink .markdownImage .markdownCode .markdownMakeOrderedList .markdownMakeUnorderedList .markdownDivider .insertFootnote .markdownBold .markdownItalic .removeFootnote #searchNext #replaceNext #replaceAll .csl-bib-body .csl-entry .cb-toggle .radio-toggle .toggle .cb-group .linux-window-controls .windows-window-controls .minimise .resize .maximise .cm-meta .cm-def .sb-annotation .cm-stex-mode .cm-css-mode .cm-attribute .cm-builtin .cm-string .cm-string-2 .cm-variable .cm-variable-2 .cm-keyword .cm-property .cm-type .cm-atom .cm-number .CodeMirror-selected .cm-tag .cm-bracket .cm-formatting-header-1 .cm-formatting-header-2 .cm-formatting-header-3 .cm-formatting-header-4 .cm-formatting-header-5 .cm-formatting-header-6 .cm-quote .cm-strong .cm-em .cm-spell-error .cm-zkn-id .citeproc-citation .cm-hr .CodeMirror-guttermarker-subtle .CodeMirror-hint-active .selected .highlight .vd-file .excerpt .active .pomodoro-task .pomodoro-short .pomodoro-long .pomodoro-meter .pomodoro-value .task .short .long .indicator-meter .indicator-value .error-info .has-error .form-inline-buttons .prefs-submit-group .ui-tabs-active .dark .CodeMirror-dialog .cm-formatting-escape .maximise-svg","title":"Complete CSS Class and ID Reference"},{"location":"editor/","text":"The Editor \u00b6 At the heart of Zettlr sits a powerful Markdown editor. It uses a highly sophisticated software called CodeMirror and therefore offers a lot of features out of the box. In this document, you will learn about writing Markdown, available commands, some special features of CodeMirror and how spellchecking works. Writing Markdown \u00b6 The idea behind Zettlr is to remove unnecessary markup and styling from your writing process. During the writing process, what matters is the content you produce, not the form in which it is presented. A little bit of formatting is provided, of course. But if it comes to colours and text align, nobody really needs plenty of options to get writing. The formatting is what happens afterwards . Therefore Zettlr lets you write Markdown -files. Markdown is a very simple markup language that only contains a small amount of formatting symbols that you may already know! In recent years, more and more apps have discovered the power of Markdown, and even WhatsApp uses it to enable simple formatting of messages. A Markdown-Document only consists of pure text and comes with a lot of benefits: Markdown is platform independent . Any Markdown file written on macOS can\u2014without any conversion\u2014be edited on Windows and Linux alike. All you need is a text editor. And with \"Notepad\" (Windows), \"TextEdit\" (macOS) or \"GEdit\" (Ubuntu) every operating system already has one built-in. Markdown's syntax is designed in such a way that even without any syntax highlighting, you get the idea of a Markdown document . Even without styling, it is easy to spot all headings, because they have leading hash signs (#), lists are indicated with bullets or numbers and emphasised text is encapsulated in underscores or asterisks. Markdown is an open source standard , meaning everybody can implement it into software (just as we did!) and begin building upon it. This also means that you can expect most apps to understand it . As Markdown is so simple and does not add any formatting by itself, any app can introduce a different way of previewing. There are tons of Markdown apps that use different approaches to writing . If Zettlr doesn't fit you, you can always choose from a plethora of different free, open source apps. Markdown documents only contain the bare necessity of formatting to help apps understand it. Therefore Markdown documents are approximately ten times smaller than conventional word processor formats ! And many more \u2026 If you want to know exactly what Markdown can do and what it can't, refer to the Markdown section . Editing text \u00b6 Editing text with Zettlr is simple. Just create a new file or select an existing one, click inside the editor and begin writing. Use Markdown formatting as you need it and make use of some shortcuts that make it even simpler to add formatting: Cmd/Ctrl+B : Make text bold Cmd/Ctrl+I : Emphasize text Cmd/Ctrl+K : Create a new [link](https://www.zettlr.com) . Selected text will become the description\u2014you only need to add the URL. And if there is a valid URL in the clipboard, Zettlr even takes it as a URL, meaning you don't have to do anything on your own! Cmd/Ctrl+Shift+I : Insert an image. If you selected text, it will become the description of the image. Just add a path to your image, or copy a path to an image before. Then, Zettlr will automatically add the clipped path! Tab : Indent any given list one level. Shift-Tab : Un-indent a list one level. Of course, all other default shortcuts that work on any text editor will also work by default: Copy text with Cmd/Ctrl+C , insert it with Cmd/Ctrl+V or cut it by pressing Cmd/Ctrl+X . Undo and redo is also supported just as removing whole words or lines. Just write as you are used to writing. Preserving Formats During Copy & Paste \u00b6 Of course it's mandatory that you can also work with formatted text. For instance, you might want to paste formatted text from a Word document or a webpage. To do so, simply copy such text and paste it. Zettlr will automatically detect that it's formatted text and convert it before inserting it. If you don't want to paste the text with formattings but as plain text, hold down Shift when pasting. This will tell Zettlr not to convert the text to Markdown. Next, at some point you want to copy some text from Zettlr but in a way that other apps can understand its format. To copy the text not as Markdown, but with a common format, you need to select Copy as HTML . The shortcut is Cmd/Ctrl+Alt+C . Refer to the section on Shortcuts , to get a list of all available shortcuts. Special features of CodeMirror \u00b6 Because CodeMirror is so powerful, there are also other great options that you can make use of (if you need them). Press Cmd (macOS) or Alt (Windows/Linux) and click somewhere in the text. Now you will have two cursors at your disposal! This is mostly useful if you are about to write some text several times to save time. To leave that multi-cursor-mode, just click anywhere in the text without the modifier keys pressed. Press Cmd (macOS) or Alt (Windows/Linux) and select some text. Now you can select several portions of text at once. This is useful if you want to create two or more links at once: Just select the portions of text that should serve as the description of these links and press Cmd/Ctrl+K to transform all the selections into links \u2014 at once! This works with all other commands like making text bold or italic, or creating quotes. If you have nothing selected, pressing Cmd/Ctrl+X will cut the full line . Pressing Cmd/Ctrl+V afterwards will insert this whole line above the line, in which your cursor is . CodeMirror auto-closes quotes and brackets to save you time! Whenever you type a \"- or a (-character, it will present you with the closing character automatically. And when you are done with your quote, just type \" or ), it will not add the character a second time but just \"jump\" over it! This also works with selected text. If you have something selected and press one of these characters, it will encapsulate your selection with it. Spellchecking \u00b6 Zettlr also features spellchecking. In your Preferences, you can select all languages, that your text should be checked for. The dictionaries are loaded on app start and your editor content is checked against it. Zettlr will move through all dictionaries to check a word, and only if none of the loaded dictionaries can find it, it will be marked as wrong with a small dashed line. To correct a word, simply right-click it and select a suggestion from the context menu, if there are any. Are you writing bilingual? No problem! Simply load all dictionaries that you potentially write text in to check against all languages at once. Just remember that dictionaries can use up a lot of memory, so if you load too many, it may slow down the application. How to disable spell checking : To disable the spellchecker completely, simply remove all dictionaries in the preferences. Working with footnotes \u00b6 Footnotes are a notoriously difficult thing in Markdown, because they require some special characters to realise them, and also need you to work at two positions in the document at once: Where you want to put your footnote and at the bottom, where the reference text resides. Zettlr tries its best to ease your pain with these in the following ways: You can use a shortcut to place footnotes: Cmd+Alt+R (macOS only) or Ctrl+Alt+F (macOS/Windows/Linux). The reference text (that is, the content of the footnote) will be displayed at the bottom end of the editor window when you hover over a footnote. If you Alt - or Ctrl -Click a footnote anchor somewhere in your text, a popup will show up that lets you edit the footnote in place. After you are finished editing your footnote, simply press Shift+Enter to close the popup and replace the text of the footnote.","title":"The Editor"},{"location":"editor/#the-editor","text":"At the heart of Zettlr sits a powerful Markdown editor. It uses a highly sophisticated software called CodeMirror and therefore offers a lot of features out of the box. In this document, you will learn about writing Markdown, available commands, some special features of CodeMirror and how spellchecking works.","title":"The Editor"},{"location":"editor/#writing-markdown","text":"The idea behind Zettlr is to remove unnecessary markup and styling from your writing process. During the writing process, what matters is the content you produce, not the form in which it is presented. A little bit of formatting is provided, of course. But if it comes to colours and text align, nobody really needs plenty of options to get writing. The formatting is what happens afterwards . Therefore Zettlr lets you write Markdown -files. Markdown is a very simple markup language that only contains a small amount of formatting symbols that you may already know! In recent years, more and more apps have discovered the power of Markdown, and even WhatsApp uses it to enable simple formatting of messages. A Markdown-Document only consists of pure text and comes with a lot of benefits: Markdown is platform independent . Any Markdown file written on macOS can\u2014without any conversion\u2014be edited on Windows and Linux alike. All you need is a text editor. And with \"Notepad\" (Windows), \"TextEdit\" (macOS) or \"GEdit\" (Ubuntu) every operating system already has one built-in. Markdown's syntax is designed in such a way that even without any syntax highlighting, you get the idea of a Markdown document . Even without styling, it is easy to spot all headings, because they have leading hash signs (#), lists are indicated with bullets or numbers and emphasised text is encapsulated in underscores or asterisks. Markdown is an open source standard , meaning everybody can implement it into software (just as we did!) and begin building upon it. This also means that you can expect most apps to understand it . As Markdown is so simple and does not add any formatting by itself, any app can introduce a different way of previewing. There are tons of Markdown apps that use different approaches to writing . If Zettlr doesn't fit you, you can always choose from a plethora of different free, open source apps. Markdown documents only contain the bare necessity of formatting to help apps understand it. Therefore Markdown documents are approximately ten times smaller than conventional word processor formats ! And many more \u2026 If you want to know exactly what Markdown can do and what it can't, refer to the Markdown section .","title":"Writing Markdown"},{"location":"editor/#editing-text","text":"Editing text with Zettlr is simple. Just create a new file or select an existing one, click inside the editor and begin writing. Use Markdown formatting as you need it and make use of some shortcuts that make it even simpler to add formatting: Cmd/Ctrl+B : Make text bold Cmd/Ctrl+I : Emphasize text Cmd/Ctrl+K : Create a new [link](https://www.zettlr.com) . Selected text will become the description\u2014you only need to add the URL. And if there is a valid URL in the clipboard, Zettlr even takes it as a URL, meaning you don't have to do anything on your own! Cmd/Ctrl+Shift+I : Insert an image. If you selected text, it will become the description of the image. Just add a path to your image, or copy a path to an image before. Then, Zettlr will automatically add the clipped path! Tab : Indent any given list one level. Shift-Tab : Un-indent a list one level. Of course, all other default shortcuts that work on any text editor will also work by default: Copy text with Cmd/Ctrl+C , insert it with Cmd/Ctrl+V or cut it by pressing Cmd/Ctrl+X . Undo and redo is also supported just as removing whole words or lines. Just write as you are used to writing.","title":"Editing text"},{"location":"editor/#preserving-formats-during-copy-paste","text":"Of course it's mandatory that you can also work with formatted text. For instance, you might want to paste formatted text from a Word document or a webpage. To do so, simply copy such text and paste it. Zettlr will automatically detect that it's formatted text and convert it before inserting it. If you don't want to paste the text with formattings but as plain text, hold down Shift when pasting. This will tell Zettlr not to convert the text to Markdown. Next, at some point you want to copy some text from Zettlr but in a way that other apps can understand its format. To copy the text not as Markdown, but with a common format, you need to select Copy as HTML . The shortcut is Cmd/Ctrl+Alt+C . Refer to the section on Shortcuts , to get a list of all available shortcuts.","title":"Preserving Formats During Copy &amp; Paste"},{"location":"editor/#special-features-of-codemirror","text":"Because CodeMirror is so powerful, there are also other great options that you can make use of (if you need them). Press Cmd (macOS) or Alt (Windows/Linux) and click somewhere in the text. Now you will have two cursors at your disposal! This is mostly useful if you are about to write some text several times to save time. To leave that multi-cursor-mode, just click anywhere in the text without the modifier keys pressed. Press Cmd (macOS) or Alt (Windows/Linux) and select some text. Now you can select several portions of text at once. This is useful if you want to create two or more links at once: Just select the portions of text that should serve as the description of these links and press Cmd/Ctrl+K to transform all the selections into links \u2014 at once! This works with all other commands like making text bold or italic, or creating quotes. If you have nothing selected, pressing Cmd/Ctrl+X will cut the full line . Pressing Cmd/Ctrl+V afterwards will insert this whole line above the line, in which your cursor is . CodeMirror auto-closes quotes and brackets to save you time! Whenever you type a \"- or a (-character, it will present you with the closing character automatically. And when you are done with your quote, just type \" or ), it will not add the character a second time but just \"jump\" over it! This also works with selected text. If you have something selected and press one of these characters, it will encapsulate your selection with it.","title":"Special features of CodeMirror"},{"location":"editor/#spellchecking","text":"Zettlr also features spellchecking. In your Preferences, you can select all languages, that your text should be checked for. The dictionaries are loaded on app start and your editor content is checked against it. Zettlr will move through all dictionaries to check a word, and only if none of the loaded dictionaries can find it, it will be marked as wrong with a small dashed line. To correct a word, simply right-click it and select a suggestion from the context menu, if there are any. Are you writing bilingual? No problem! Simply load all dictionaries that you potentially write text in to check against all languages at once. Just remember that dictionaries can use up a lot of memory, so if you load too many, it may slow down the application. How to disable spell checking : To disable the spellchecker completely, simply remove all dictionaries in the preferences.","title":"Spellchecking"},{"location":"editor/#working-with-footnotes","text":"Footnotes are a notoriously difficult thing in Markdown, because they require some special characters to realise them, and also need you to work at two positions in the document at once: Where you want to put your footnote and at the bottom, where the reference text resides. Zettlr tries its best to ease your pain with these in the following ways: You can use a shortcut to place footnotes: Cmd+Alt+R (macOS only) or Ctrl+Alt+F (macOS/Windows/Linux). The reference text (that is, the content of the footnote) will be displayed at the bottom end of the editor window when you hover over a footnote. If you Alt - or Ctrl -Click a footnote anchor somewhere in your text, a popup will show up that lets you edit the footnote in place. After you are finished editing your footnote, simply press Shift+Enter to close the popup and replace the text of the footnote.","title":"Working with footnotes"},{"location":"export/","text":"Exporting in Zettlr \u00b6 Exporting files is an important interface between your notes and other people. With the export option, you can: Preview a file, for instance as HTML, and also print it. (Printing a note using Cmd/Ctrl+P will internally export the note to HTML.) Export it to a format with which other people can work, such as Word or OpenDocument files. Export it to PDF to reach it in (such as seminar papers) or, also, print it. Preparing exports \u00b6 All exports in Zettlr, except HTML, are done using the free software packages Pandoc and LaTeX. Pandoc is necessary for all exports, because everything will first be converted by it. LaTeX is only necessary for PDF export. HTML-files are converted directly by Zettlr itself using the Showdown.js -package, which comes bundled with Zettlr. Therefore, to simply preview documents and print them, you do not need either Pandoc or LaTeX installed on your system. Refer to the guides on how to install Pandoc and how to install LaTeX on your computer. Zettlr will make reasonable efforts to locate both packages. If the app could not find the packages, it will throw an error. In case you have installed both packages, but Zettlr still won't export , take a look at your Preferences. In the \"Advanced\"-tab, there are two text fields that allow you to enter the paths to the Pandoc-executable and the \"XeLaTeX\"-executable. Simply put them in there, restart, and then it should work. If not, please let me know! Options for exporting \u00b6 Starting from version 0.17 , Zettlr provides you with a plethora of options to export documents according to your needs. They are split in two different dialogs. The general options for exporting are located within the preferences window. Open it, and navigate to the \"Export\"-tab. There you have two sections letting you customise the exports. First, you can select in which directory the resulting files should be stored. Selecting the temporary directory will make Zettlr save your export documents to the temporary directory. The temporary directory is a special folder on every operating system that is used for temporary files and is expunged as soon as a file is not needed anymore. This is good if you don't want to store exported files anywhere on your system. If you export your files to the temporary directory, you will have to save them explicitly somewhere else to make it persistent. Choosing the current working directory (cwd) makes Zettlr save your exported documents to the currently selected directory. This way, you don't have to explicitly save your documents out of the temporary directory to make them persistently accessible. Please note that the exporting engine will not ask for your confirmation if it is about to overwrite a file! The second section features options to tell Zettlr what to do with the Zettelkasten-elements it supports. If you want to know what these elements are for, please consult the respective section of the docs . This section enables you to retain or remove those elements on export, because under most circumstances they are only useful and needed within the app itself, and should not appear in exported documents. A second section that contains preferences for exports is located in the PDF Preferences dialog. You can open it using the menu (it is located directly under the regular preferences menu item) or using the shortcut Cmd/Ctrl+Alt+, . This dialog features options for PDF exports. You can choose a bunch of formatting options, such as the paper type, page margins, the font or font size, and whether or not you want page numbers, and if so, which ones. Most exporting options will be self-explanatory and resemble those given in standard word processors.","title":"Exporting in Zettlr"},{"location":"export/#exporting-in-zettlr","text":"Exporting files is an important interface between your notes and other people. With the export option, you can: Preview a file, for instance as HTML, and also print it. (Printing a note using Cmd/Ctrl+P will internally export the note to HTML.) Export it to a format with which other people can work, such as Word or OpenDocument files. Export it to PDF to reach it in (such as seminar papers) or, also, print it.","title":"Exporting in Zettlr"},{"location":"export/#preparing-exports","text":"All exports in Zettlr, except HTML, are done using the free software packages Pandoc and LaTeX. Pandoc is necessary for all exports, because everything will first be converted by it. LaTeX is only necessary for PDF export. HTML-files are converted directly by Zettlr itself using the Showdown.js -package, which comes bundled with Zettlr. Therefore, to simply preview documents and print them, you do not need either Pandoc or LaTeX installed on your system. Refer to the guides on how to install Pandoc and how to install LaTeX on your computer. Zettlr will make reasonable efforts to locate both packages. If the app could not find the packages, it will throw an error. In case you have installed both packages, but Zettlr still won't export , take a look at your Preferences. In the \"Advanced\"-tab, there are two text fields that allow you to enter the paths to the Pandoc-executable and the \"XeLaTeX\"-executable. Simply put them in there, restart, and then it should work. If not, please let me know!","title":"Preparing exports"},{"location":"export/#options-for-exporting","text":"Starting from version 0.17 , Zettlr provides you with a plethora of options to export documents according to your needs. They are split in two different dialogs. The general options for exporting are located within the preferences window. Open it, and navigate to the \"Export\"-tab. There you have two sections letting you customise the exports. First, you can select in which directory the resulting files should be stored. Selecting the temporary directory will make Zettlr save your export documents to the temporary directory. The temporary directory is a special folder on every operating system that is used for temporary files and is expunged as soon as a file is not needed anymore. This is good if you don't want to store exported files anywhere on your system. If you export your files to the temporary directory, you will have to save them explicitly somewhere else to make it persistent. Choosing the current working directory (cwd) makes Zettlr save your exported documents to the currently selected directory. This way, you don't have to explicitly save your documents out of the temporary directory to make them persistently accessible. Please note that the exporting engine will not ask for your confirmation if it is about to overwrite a file! The second section features options to tell Zettlr what to do with the Zettelkasten-elements it supports. If you want to know what these elements are for, please consult the respective section of the docs . This section enables you to retain or remove those elements on export, because under most circumstances they are only useful and needed within the app itself, and should not appear in exported documents. A second section that contains preferences for exports is located in the PDF Preferences dialog. You can open it using the menu (it is located directly under the regular preferences menu item) or using the shortcut Cmd/Ctrl+Alt+, . This dialog features options for PDF exports. You can choose a bunch of formatting options, such as the paper type, page margins, the font or font size, and whether or not you want page numbers, and if so, which ones. Most exporting options will be self-explanatory and resemble those given in standard word processors.","title":"Options for exporting"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 \"I tried to install Zettlr on Windows/macOS, but there's a security warning saying I shouldn't install the app!\" Both Windows and macOS require so-called \"code-signing\" in order to be able to trust the application. While this is a great technique of keeping malicious code from harming your system, it requires an annual subscription fee. This is why Zettlr-builds are not code-signed and therefore produce warnings. You can safely install Zettlr, as long as you download them from the our page, and ignore these warnings. \"Are there any plans of porting Zettlr to mobile phones and tables, for Android or iOS?\" We are getting more and more requests concerning mobile versions of Zettlr. We are very happy that you like Zettlr enough to want having it on all your devices, and we would love to fulfil this desire! Unfortunately, though, our resources are just enough to keep the development of Zettlr up and running, but adding more work is just not possible at the moment. Of course, as soon as this changes, we will get to it! \"What is Markdown?\" Markdown is a simple markup language that enables you to write text just as complex as using standard office software, but with much less clutter. Instead of having to manually select all formatting options, in Markdown, typing a # suffices to indicate a heading! Want to hear more? Then head over to the documentation on Markdown ! \"If I don't want to use Zettlr anymore, what would I need to do to switch programs?\" Simply uninstall Zettlr and begin using another one. Zettlr does not mess with your files. If you have been using Virtual Directories or Projects, there will be small files named .ztr-virtual-directories and .ztr-projects present in some folders. To remove them, simply delete any virtual directories and projects prior to uninstalling the app (or manually remove these files afterwards). I'm using Linux and deleting files doesn't move them to the trash! Zettlr never completely removes your files. It always only moves them to the trash so in case you accidentally remove a file you need you can always restore it. On macOS and Windows systems, the trash is activated by default, but on some Linux distributions, you need to activate the trash functionality manually. On Linux, Zettlr (to be more precise: the underlying framework electron) makes use of the binary gvfs-trash to move files to the trash. To avoid shock moments it'll never try to \"fall back\" to removing files completely. Therefore, to make use of this functionality, please make sure you have gvfs-trash installed! On Debian/Ubuntu you can do so by running the following code in a terminal: $ sudo apt install gvfs-bin The internal links do not open the respective file! In case the internal links that are used to interlink files to access them using a shortcut don't work as expected, please make sure you've done the following things: Is the link recognised? Zettlr enables you to define what internal links look like. By default, they are encapsulated by [[ and ]] . When Zettlr recognises an internal link, it will colour it and if you enter with your mouse, the contained text should become underlined. If it does not, Zettlr doesn't think that what you've written is a link. You can change this in the settings. Did you press the Alt - or Ctrl -key while clicking on the link? As clicking with your mouse somewhere in the text normally means that you intend to change something, you have to tell Zettlr that you actually want to follow the link. Did you use a valid filename or ID? Zettlr only opens files, if they report they exactly have the given ID or the given filename. If nothing happens while clicking on the link, this surely means that a file with the given ID or filename does not exist in the system. Note that you must omit the extension: to link to my-file.md , you need to put only my-file inside the brackets. Is the file currently loaded into Zettlr? Internal linking obviously only works if Zettlr has read the file. \"I know LaTeX and want to use it inside my Markdown files as well. Is this possible?\" Yes. Simply write your LaTeX -statements where you want them. As soon as you export to PDF, Pandoc will take care the statements will be interpreted by the PDF engine. Unfortunately, LaTeX syntax highlighting is not supported yet. Also, please note that Pandoc will clear all LaTeX -blocks prior to exporting to anything other than PDF, which means that blocks within \\begin and \\end , for instance, will be missing completely from the final Office file. On HTML-export, all LaTeX -blocks will retained, but not converted to something else. \"I can't seem to align the text just or right!\" It's not a bug, it's a feature: Markdown does not have the respective formatting signs because text should always be justified or aligned left and therefore it does not belong to the set of necessary block formats Markdown offers. Yet, you can still use LaTeX -commands to render them left or right. Simply enclose the text you want to align right or justify in \\begin{<option>} and \\end{<option>} , where <option> may either refer to flushleft , flushright or put a \\justify in front of a paragraph you want to be justified. Learn more at sharelatex.com . \"I want to use single line breaks and not create new paragraphs. When I simply hit Enter once, it removes the single line break!\" To force Pandoc to render single line breaks as such, end your line with a backslash ( \\ ) or two spaces. The backslash as well as the two spaces will not be rendered in the resulting file. \"Do I really need Pandoc or LaTeX?\" For plain HTML export, no. For all other export formats, yes. Zettlr depends on those programs to enable exporting of files. But don't worry: They are Open Source and therefore completely free of charge, and available on all Operating Systems! \"How do I install Pandoc or LaTeX?\" Please refer to the guides on installing Pandoc and where to get LaTeX . \"Zettlr does not seem to find Pandoc and LaTeX, which are nonetheless installed!\" This can happen in case your computer decided to install the software in a non-standard directory. Zettlr will try its best to locate the applications but may fail if they are buried somewhere. That's where the path-options in the preferences come into play. In case Zettlr does not find any of the binaries, you can enter the full path to them in the appropriate text fields in the Advanced -tab. On Windows, you should never encounter this issue, as long as you leave the default installation path during install set to the default Program Files directory of Windows. If you wanted to install the programs to different locations, rendering Zettlr unable to find them, simply search your system using the Explorer for two files, the first being pandoc.exe and the second being xelatex.exe . Copy the full path (including the executable's name!) to the appropriate text field in the Zettlr preferences. On macOS you can easily find the path by opening up Terminal.app (it's in your Applications folder under Other ) and then type which pandoc or which xelatex , depending on which software Zettlr does not find. Terminal will simply output the full path to the program. On Linux distributions, you also need to open up a Command Line/Terminal and use the same commands as on macOS: which pandoc for Pandoc and which xelatex for LaTeX. \"I found a bug!\" That's great news! Well, not great, but it's good that you found it! In this case please head over to GitHub and open up an issue so that we know what's up and can work to resolve the bug. \"I have a feature request!\" / \"I have a suggestion for making a feature more efficient!\" That's good to hear! We always depend on other people's experience with the app to improve its efficiency and its suitability for different situations. In this case, please head over to GitHub and open up an issue so that we can get right to it. \"What about my privacy? Does Zettlr transfer any data, or don't I have to worry?\" Zettlr is privacy-first. It does not send any data, and it is fully functional offline. Yet, there is one instance where Zettlr sends data over the web: The update check. Whenever you open Zettlr, or use the menu item, Zettlr will connect to the GitHub-API to retrieve a list of all releases. This list is then used to determine whether or not you are using the newest release, or not. During the connection, GitHub will receive your IP-address and will know that an Electron-app is accessing the API. Other than that, no data is being transferred. Also, this information is also sent when you manually visit the releases-page, along with a lot more data.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"\"I tried to install Zettlr on Windows/macOS, but there's a security warning saying I shouldn't install the app!\" Both Windows and macOS require so-called \"code-signing\" in order to be able to trust the application. While this is a great technique of keeping malicious code from harming your system, it requires an annual subscription fee. This is why Zettlr-builds are not code-signed and therefore produce warnings. You can safely install Zettlr, as long as you download them from the our page, and ignore these warnings. \"Are there any plans of porting Zettlr to mobile phones and tables, for Android or iOS?\" We are getting more and more requests concerning mobile versions of Zettlr. We are very happy that you like Zettlr enough to want having it on all your devices, and we would love to fulfil this desire! Unfortunately, though, our resources are just enough to keep the development of Zettlr up and running, but adding more work is just not possible at the moment. Of course, as soon as this changes, we will get to it! \"What is Markdown?\" Markdown is a simple markup language that enables you to write text just as complex as using standard office software, but with much less clutter. Instead of having to manually select all formatting options, in Markdown, typing a # suffices to indicate a heading! Want to hear more? Then head over to the documentation on Markdown ! \"If I don't want to use Zettlr anymore, what would I need to do to switch programs?\" Simply uninstall Zettlr and begin using another one. Zettlr does not mess with your files. If you have been using Virtual Directories or Projects, there will be small files named .ztr-virtual-directories and .ztr-projects present in some folders. To remove them, simply delete any virtual directories and projects prior to uninstalling the app (or manually remove these files afterwards). I'm using Linux and deleting files doesn't move them to the trash! Zettlr never completely removes your files. It always only moves them to the trash so in case you accidentally remove a file you need you can always restore it. On macOS and Windows systems, the trash is activated by default, but on some Linux distributions, you need to activate the trash functionality manually. On Linux, Zettlr (to be more precise: the underlying framework electron) makes use of the binary gvfs-trash to move files to the trash. To avoid shock moments it'll never try to \"fall back\" to removing files completely. Therefore, to make use of this functionality, please make sure you have gvfs-trash installed! On Debian/Ubuntu you can do so by running the following code in a terminal: $ sudo apt install gvfs-bin The internal links do not open the respective file! In case the internal links that are used to interlink files to access them using a shortcut don't work as expected, please make sure you've done the following things: Is the link recognised? Zettlr enables you to define what internal links look like. By default, they are encapsulated by [[ and ]] . When Zettlr recognises an internal link, it will colour it and if you enter with your mouse, the contained text should become underlined. If it does not, Zettlr doesn't think that what you've written is a link. You can change this in the settings. Did you press the Alt - or Ctrl -key while clicking on the link? As clicking with your mouse somewhere in the text normally means that you intend to change something, you have to tell Zettlr that you actually want to follow the link. Did you use a valid filename or ID? Zettlr only opens files, if they report they exactly have the given ID or the given filename. If nothing happens while clicking on the link, this surely means that a file with the given ID or filename does not exist in the system. Note that you must omit the extension: to link to my-file.md , you need to put only my-file inside the brackets. Is the file currently loaded into Zettlr? Internal linking obviously only works if Zettlr has read the file. \"I know LaTeX and want to use it inside my Markdown files as well. Is this possible?\" Yes. Simply write your LaTeX -statements where you want them. As soon as you export to PDF, Pandoc will take care the statements will be interpreted by the PDF engine. Unfortunately, LaTeX syntax highlighting is not supported yet. Also, please note that Pandoc will clear all LaTeX -blocks prior to exporting to anything other than PDF, which means that blocks within \\begin and \\end , for instance, will be missing completely from the final Office file. On HTML-export, all LaTeX -blocks will retained, but not converted to something else. \"I can't seem to align the text just or right!\" It's not a bug, it's a feature: Markdown does not have the respective formatting signs because text should always be justified or aligned left and therefore it does not belong to the set of necessary block formats Markdown offers. Yet, you can still use LaTeX -commands to render them left or right. Simply enclose the text you want to align right or justify in \\begin{<option>} and \\end{<option>} , where <option> may either refer to flushleft , flushright or put a \\justify in front of a paragraph you want to be justified. Learn more at sharelatex.com . \"I want to use single line breaks and not create new paragraphs. When I simply hit Enter once, it removes the single line break!\" To force Pandoc to render single line breaks as such, end your line with a backslash ( \\ ) or two spaces. The backslash as well as the two spaces will not be rendered in the resulting file. \"Do I really need Pandoc or LaTeX?\" For plain HTML export, no. For all other export formats, yes. Zettlr depends on those programs to enable exporting of files. But don't worry: They are Open Source and therefore completely free of charge, and available on all Operating Systems! \"How do I install Pandoc or LaTeX?\" Please refer to the guides on installing Pandoc and where to get LaTeX . \"Zettlr does not seem to find Pandoc and LaTeX, which are nonetheless installed!\" This can happen in case your computer decided to install the software in a non-standard directory. Zettlr will try its best to locate the applications but may fail if they are buried somewhere. That's where the path-options in the preferences come into play. In case Zettlr does not find any of the binaries, you can enter the full path to them in the appropriate text fields in the Advanced -tab. On Windows, you should never encounter this issue, as long as you leave the default installation path during install set to the default Program Files directory of Windows. If you wanted to install the programs to different locations, rendering Zettlr unable to find them, simply search your system using the Explorer for two files, the first being pandoc.exe and the second being xelatex.exe . Copy the full path (including the executable's name!) to the appropriate text field in the Zettlr preferences. On macOS you can easily find the path by opening up Terminal.app (it's in your Applications folder under Other ) and then type which pandoc or which xelatex , depending on which software Zettlr does not find. Terminal will simply output the full path to the program. On Linux distributions, you also need to open up a Command Line/Terminal and use the same commands as on macOS: which pandoc for Pandoc and which xelatex for LaTeX. \"I found a bug!\" That's great news! Well, not great, but it's good that you found it! In this case please head over to GitHub and open up an issue so that we know what's up and can work to resolve the bug. \"I have a feature request!\" / \"I have a suggestion for making a feature more efficient!\" That's good to hear! We always depend on other people's experience with the app to improve its efficiency and its suitability for different situations. In this case, please head over to GitHub and open up an issue so that we can get right to it. \"What about my privacy? Does Zettlr transfer any data, or don't I have to worry?\" Zettlr is privacy-first. It does not send any data, and it is fully functional offline. Yet, there is one instance where Zettlr sends data over the web: The update check. Whenever you open Zettlr, or use the menu item, Zettlr will connect to the GitHub-API to retrieve a list of all releases. This list is then used to determine whether or not you are using the newest release, or not. During the connection, GitHub will receive your IP-address and will know that an Electron-app is accessing the API. Other than that, no data is being transferred. Also, this information is also sent when you manually visit the releases-page, along with a lot more data.","title":"Frequently Asked Questions"},{"location":"file-list/","text":"The file list \u00b6 Next on is the file list. The file list is something very special because it bears powerful features that ease your work with a lot of files and directories. So let's have a look! General \u00b6 You can always show/hide the list by pressing Cmd/Ctrl+Shift+2 . Note that this shortcut has no effect if you are using the extended display mode of the sidebar. See the Settings page for more on this. The file list shows you all directories and files inside the directory that is currently selected in the tree view, but not like a normal file browser: the file list treats all subdirectories as equals, and shows you all of them one after another! Therefore you don't need to traverse further into the directory tree to reach buried directories. If snippets are not visible, both directories and files will be shown as one-liners. If you activate the snippets, you will see additional information: directories will show you the amount of children they have. The files, on the other hand, show their last modification date. If they contain an ID or tags, this information will be displayed after the modification date. Hovering over the tag counter, you can see a small tooltip that shows you all tags that are in the file. You can toggle the snippets via the View-menu or by pressing Cmd/Ctrl+Alt+S . File IDs and Tags \u00b6 The additional information shown by your files in the file list can be beneficial for a number of reasons. First, you can check whether or not the ID of the file looks right. Sometimes, Zettlr may detect a wrong ID, and this is the first way to check if Zettlr actually uses your ID, or just grabbed some part of a URL that contains a lot of numbers. Additionally, you can hover over the amount of tags to display them in a tooltip. Writing Targets \u00b6 Since version 1.2, Zettlr supports setting writing targets. To set a target, right-click a file and choose \"Set writing target \u2026\". Enter the amount of words or characters and click \"Set\". Zettlr will count towards your goal and show you the progress showing a small indicator if you have snippets activated. Hover over it to see the absolute number of words or characters that you've written. To remove the writing target from a file, simply set the writing counter to zero words or characters. If you want to sort directories, you can do this from within the file list. Simply move the mouse over any directory and two indicators will appear showing you the current state of sorting. Click on the first (with an arrow from A to Z) to toggle the sorting by name. The second toggles the sorting by the last modification time. Subdirectories will not be sorted this way \u2014 only files. Also you can traverse the directory tree by clicking on the directories. A simple click will select the directory, while an ALT -click will select its parent directory. This is useful if you have to switch directories often, but prefer the thin mode of the sidebar and don't want to switch to the tree view repeatedly. Structural implications \u00b6 Each time you select a directory in the tree view, the file list will display all files and directories in this directory. Simply put, it flattens all your different subdirectories and files from the tree-like structure that is being resembled by the directory list into a one-dimensional list. The list will always change its contents whenever you select a different directory in the tree view. The list only displays all directories and files within the currently selected directory. Therefore it works a little bit like a very fast search function. You only see the files in a specific directory and, when you move down level by level, less and less files are visible until only one directory and its files are visible. Given a good structure inside your root, this is a powerful way to only have those files in the list that you actually need. As the file list flattens your complex directory tree, it has to make some assumptions on how to adequately display the files. Therefore the following rules help you distinguish where the files are actually present on your disk: The currently selected directory will be on top of the list of files. Always. All files that are inside this directory are placed directly beneath this directory name. All subdirectories that are inside this directory will always be at the bottom of the file list, i.e. after the files in the selected directory. If directories are empty, they will be placed immediately after each other with no files in between. So what is important to remember is: All directories will be displayed as if they reside on the very same level; as if they weren't nested. To identify which directories contain which, please refer to the tree view. The files and directories in Zettlr are always sorted by name ascending. So a directory beginning with an \"A\" will always be higher than a \"D\". Also, directories containing a zero will always come first, those containing a nine afterwards. But remember that a \"10\" will be placed before a \"2\" because the sorting only looks at one single character at a time and 1 is smaller than 2. If you want to use numbers for sorting, add leading zeroes . Actions in the file list \u00b6 There are many actions that refer to the list. First, just select a tile to open any file and display its contents in the editor. You can move your files into different locations. Just drag them from the file list onto a directory in the directory tree. The directory you are hovering over will receive a slight shimmer to indicate where your file is going to be moved. Just drop the file there, to move it or drop the file everywhere else to abort the moving and revert the file to its original position. If you drag a file outside of the app, you are able to share the file with other programs. To cancel this dragging-out, simply release the mouse over your app again. Search heatmap \u00b6 Another useful feature of the file list is to help you distinguish what search results are the most relevant. Once you've executed a search, the list will change its colour like a chameleon. It will paint all files in 50 shades of green (yep, we've just made that joke). The greener a file is, the more relevant the file is to your current search. This is a feature one might call a \"heatmap\" for fulltext searches. Please remember that the list is highly adaptable and will morph a lot while you use the app. For instance, it will not only display all files and directories in the currently selected directory, but also hides files with no results from the preview list, when the list is in search-mode.","title":"The file list"},{"location":"file-list/#the-file-list","text":"Next on is the file list. The file list is something very special because it bears powerful features that ease your work with a lot of files and directories. So let's have a look!","title":"The file list"},{"location":"file-list/#general","text":"You can always show/hide the list by pressing Cmd/Ctrl+Shift+2 . Note that this shortcut has no effect if you are using the extended display mode of the sidebar. See the Settings page for more on this. The file list shows you all directories and files inside the directory that is currently selected in the tree view, but not like a normal file browser: the file list treats all subdirectories as equals, and shows you all of them one after another! Therefore you don't need to traverse further into the directory tree to reach buried directories. If snippets are not visible, both directories and files will be shown as one-liners. If you activate the snippets, you will see additional information: directories will show you the amount of children they have. The files, on the other hand, show their last modification date. If they contain an ID or tags, this information will be displayed after the modification date. Hovering over the tag counter, you can see a small tooltip that shows you all tags that are in the file. You can toggle the snippets via the View-menu or by pressing Cmd/Ctrl+Alt+S .","title":"General"},{"location":"file-list/#file-ids-and-tags","text":"The additional information shown by your files in the file list can be beneficial for a number of reasons. First, you can check whether or not the ID of the file looks right. Sometimes, Zettlr may detect a wrong ID, and this is the first way to check if Zettlr actually uses your ID, or just grabbed some part of a URL that contains a lot of numbers. Additionally, you can hover over the amount of tags to display them in a tooltip.","title":"File IDs and Tags"},{"location":"file-list/#writing-targets","text":"Since version 1.2, Zettlr supports setting writing targets. To set a target, right-click a file and choose \"Set writing target \u2026\". Enter the amount of words or characters and click \"Set\". Zettlr will count towards your goal and show you the progress showing a small indicator if you have snippets activated. Hover over it to see the absolute number of words or characters that you've written. To remove the writing target from a file, simply set the writing counter to zero words or characters. If you want to sort directories, you can do this from within the file list. Simply move the mouse over any directory and two indicators will appear showing you the current state of sorting. Click on the first (with an arrow from A to Z) to toggle the sorting by name. The second toggles the sorting by the last modification time. Subdirectories will not be sorted this way \u2014 only files. Also you can traverse the directory tree by clicking on the directories. A simple click will select the directory, while an ALT -click will select its parent directory. This is useful if you have to switch directories often, but prefer the thin mode of the sidebar and don't want to switch to the tree view repeatedly.","title":"Writing Targets"},{"location":"file-list/#structural-implications","text":"Each time you select a directory in the tree view, the file list will display all files and directories in this directory. Simply put, it flattens all your different subdirectories and files from the tree-like structure that is being resembled by the directory list into a one-dimensional list. The list will always change its contents whenever you select a different directory in the tree view. The list only displays all directories and files within the currently selected directory. Therefore it works a little bit like a very fast search function. You only see the files in a specific directory and, when you move down level by level, less and less files are visible until only one directory and its files are visible. Given a good structure inside your root, this is a powerful way to only have those files in the list that you actually need. As the file list flattens your complex directory tree, it has to make some assumptions on how to adequately display the files. Therefore the following rules help you distinguish where the files are actually present on your disk: The currently selected directory will be on top of the list of files. Always. All files that are inside this directory are placed directly beneath this directory name. All subdirectories that are inside this directory will always be at the bottom of the file list, i.e. after the files in the selected directory. If directories are empty, they will be placed immediately after each other with no files in between. So what is important to remember is: All directories will be displayed as if they reside on the very same level; as if they weren't nested. To identify which directories contain which, please refer to the tree view. The files and directories in Zettlr are always sorted by name ascending. So a directory beginning with an \"A\" will always be higher than a \"D\". Also, directories containing a zero will always come first, those containing a nine afterwards. But remember that a \"10\" will be placed before a \"2\" because the sorting only looks at one single character at a time and 1 is smaller than 2. If you want to use numbers for sorting, add leading zeroes .","title":"Structural implications"},{"location":"file-list/#actions-in-the-file-list","text":"There are many actions that refer to the list. First, just select a tile to open any file and display its contents in the editor. You can move your files into different locations. Just drag them from the file list onto a directory in the directory tree. The directory you are hovering over will receive a slight shimmer to indicate where your file is going to be moved. Just drop the file there, to move it or drop the file everywhere else to abort the moving and revert the file to its original position. If you drag a file outside of the app, you are able to share the file with other programs. To cancel this dragging-out, simply release the mouse over your app again.","title":"Actions in the file list"},{"location":"file-list/#search-heatmap","text":"Another useful feature of the file list is to help you distinguish what search results are the most relevant. Once you've executed a search, the list will change its colour like a chameleon. It will paint all files in 50 shades of green (yep, we've just made that joke). The greener a file is, the more relevant the file is to your current search. This is a feature one might call a \"heatmap\" for fulltext searches. Please remember that the list is highly adaptable and will morph a lot while you use the app. For instance, it will not only display all files and directories in the currently selected directory, but also hides files with no results from the preview list, when the list is in search-mode.","title":"Search heatmap"},{"location":"get-involved/","text":"Get involved \u00b6 Do you want to make Zettlr an even better app? That's great! Whether you are a user, want to provide a new translation, or get into developing, you've come to the right place. Here I describe how. User \u00b6 As a user who wants a good-looking, well-working writing app, just keep your eyes open for any error the app might produce and, more importantly, tell us how to make the workflow more efficient! We can only judge for our own workflow, so to make the app better for you as well, we need to know how. Always remember: We cannot build a workflow as-is into the design but have to make concessions to other workflows, but we'll try to make features more accessible or working smoother as long as the trade-offs for the existing workflows and the new suggestion are not too hard. Please report bugs by opening up issues on the GitHub repository ! This way we are able to to quickly respond to the report and directly get to handle the problem. Translating the App \u00b6 We welcome any help in translating the app in all languages of this planet. Translations are managed on our Translation Server. To translate, you'll need to create an account, which is only used as an anti-spam measure. Additionally \u2014 but only if you want to \u2014 you will be credited using your username in all generated translations. Translating is simple. Just click on any language on the main page to see the list of all identifiers and all existing translations: On the left side you'll see all translation IDs. They will mostly be self-explanatory. If you don't know where to start, simply have a look at the English translation and at the app. Then you'll know which translation IDs will correspond to which elements. We've implemented a user-based quality management system in the service, which consists in you being able to vote on existing translations. So even if you don't want to translate yourself, you can look through all translations and vote for the one you deem correct. Whenever somebody downloads a translation, the system will take the best-rated translation strings to ensure all translations are verified by you, our users! For more information, please see the short guide to our translation service . Developing \u00b6 To start developing, simply fork the repository, work on your features, bug fixes, etc. and then open pull-requests. Please remember to only PR to the develop branch! The master-branch is only pushed to once a new release is being drafted. So if you are developing a new feature and a new version of Zettlr is released, you can simply pull the origin master and merge it into your develop branch to be up to date again and continue writing your feature. If you are beginning to develop a feature, it also may be wise to announce that using a new issue to just let the rest know that somebody is already doing it to maximise efficiency!","title":"Get involved"},{"location":"get-involved/#get-involved","text":"Do you want to make Zettlr an even better app? That's great! Whether you are a user, want to provide a new translation, or get into developing, you've come to the right place. Here I describe how.","title":"Get involved"},{"location":"get-involved/#user","text":"As a user who wants a good-looking, well-working writing app, just keep your eyes open for any error the app might produce and, more importantly, tell us how to make the workflow more efficient! We can only judge for our own workflow, so to make the app better for you as well, we need to know how. Always remember: We cannot build a workflow as-is into the design but have to make concessions to other workflows, but we'll try to make features more accessible or working smoother as long as the trade-offs for the existing workflows and the new suggestion are not too hard. Please report bugs by opening up issues on the GitHub repository ! This way we are able to to quickly respond to the report and directly get to handle the problem.","title":"User"},{"location":"get-involved/#translating-the-app","text":"We welcome any help in translating the app in all languages of this planet. Translations are managed on our Translation Server. To translate, you'll need to create an account, which is only used as an anti-spam measure. Additionally \u2014 but only if you want to \u2014 you will be credited using your username in all generated translations. Translating is simple. Just click on any language on the main page to see the list of all identifiers and all existing translations: On the left side you'll see all translation IDs. They will mostly be self-explanatory. If you don't know where to start, simply have a look at the English translation and at the app. Then you'll know which translation IDs will correspond to which elements. We've implemented a user-based quality management system in the service, which consists in you being able to vote on existing translations. So even if you don't want to translate yourself, you can look through all translations and vote for the one you deem correct. Whenever somebody downloads a translation, the system will take the best-rated translation strings to ensure all translations are verified by you, our users! For more information, please see the short guide to our translation service .","title":"Translating the App"},{"location":"get-involved/#developing","text":"To start developing, simply fork the repository, work on your features, bug fixes, etc. and then open pull-requests. Please remember to only PR to the develop branch! The master-branch is only pushed to once a new release is being drafted. So if you are developing a new feature and a new version of Zettlr is released, you can simply pull the origin master and merge it into your develop branch to be up to date again and continue writing your feature. If you are beginning to develop a feature, it also may be wise to announce that using a new issue to just let the rest know that somebody is already doing it to maximise efficiency!","title":"Developing"},{"location":"getting-started/","text":"Zettlr: Getting Started \u00b6 Thank you for choosing Zettlr! On these pages, we help you get started with the app to supercharge your own writing. If you haven't yet gotten your own copy of Zettlr, head over to the download page and get it for your Operating System! If you need help installing Zettlr, please consult the setup instructions ! It is also recommended to set up Pandoc and LaTeX to enable all importing and exporting functionality of Zettlr. Don't worry, it's really easy! When you're set, choose an entry-point into the documentation: Learn Zettlr in 5 Minutes Don't want to waste time? Head over to our very-quick start guide! After five minutes you'll know everything you need to know to write. User Guides Have a look at our user guides so that you can learn all workflows. This documentation is not focused around features, it is focused around workflows. Here you can read about single workflows that you are likely to be using, step by step. Use Zettlr as a note taking app Use Zettlr as a Zettelkasten system Use Zettlr as a full IDE Components Everyone can become very quick and efficient at his or her workflow, but can you really excel without a deep knowledge about how something works? Shortcuts to mundane tasks and key combinations for speeding up common tasks as well as hidden features of Zettlr are explained here. Learn how to move whole paragraphs around with two clicks or how to link to websites with only one click in these advanced guides. Virtual directories Understanding the file list The editor Using the global search Exporting your files Making use of projects Read about all settings that you can adjust A handy list of all shortcuts Translating Zettlr Currently, Zettlr is only available in English, German and French. But according to the internet\u2122, there are roughly 6,500 spoken languages on the world. So any help is welcome in translating the app. You can download all languages that have already been translated over at our translation page and even get into into translating it yourself! Do you want to translate the app into a language that is not offered at the page? Simply drop us a note , and we'll add it !","title":"Getting Started"},{"location":"getting-started/#zettlr-getting-started","text":"Thank you for choosing Zettlr! On these pages, we help you get started with the app to supercharge your own writing. If you haven't yet gotten your own copy of Zettlr, head over to the download page and get it for your Operating System! If you need help installing Zettlr, please consult the setup instructions ! It is also recommended to set up Pandoc and LaTeX to enable all importing and exporting functionality of Zettlr. Don't worry, it's really easy! When you're set, choose an entry-point into the documentation: Learn Zettlr in 5 Minutes Don't want to waste time? Head over to our very-quick start guide! After five minutes you'll know everything you need to know to write. User Guides Have a look at our user guides so that you can learn all workflows. This documentation is not focused around features, it is focused around workflows. Here you can read about single workflows that you are likely to be using, step by step. Use Zettlr as a note taking app Use Zettlr as a Zettelkasten system Use Zettlr as a full IDE Components Everyone can become very quick and efficient at his or her workflow, but can you really excel without a deep knowledge about how something works? Shortcuts to mundane tasks and key combinations for speeding up common tasks as well as hidden features of Zettlr are explained here. Learn how to move whole paragraphs around with two clicks or how to link to websites with only one click in these advanced guides. Virtual directories Understanding the file list The editor Using the global search Exporting your files Making use of projects Read about all settings that you can adjust A handy list of all shortcuts Translating Zettlr Currently, Zettlr is only available in English, German and French. But according to the internet\u2122, there are roughly 6,500 spoken languages on the world. So any help is welcome in translating the app. You can download all languages that have already been translated over at our translation page and even get into into translating it yourself! Do you want to translate the app into a language that is not offered at the page? Simply drop us a note , and we'll add it !","title":"Zettlr: Getting Started"},{"location":"guide-ide/","text":"Guide: Zettlr as an Integrated Development Environment (IDE) \u00b6 Zettlr is full with functions that help your workflow. You can use it as a small note-taking app, as a Zettelkasten, or, as explained in this guide, as a fully loaded integrated development (read: writing) environment. So let's get started! Using this guide, you can set up Zettlr to be a replacement for apps such as Ulysses, Atom, or Sublime Text. Step 1: Adjust the Settings \u00b6 The first step is to adjust some of the parameters of Zettlr. So hit Cmd/Ctrl+, or press the cog in the toolbar to open the settings dialog. Adjust the following settings: General Tab Text Snippets: On Sidebar mode: Expanded Editor Tab Select all dictionaries for languages in which you will write (e.g., en-UK, de-DE, and fr-FR) Export Tab Select the Current Working Directory as the export directory Remove ZKN IDs: On Remove Tags: On Remove internal links completely Zettelkasten Tab Adjust the settings according to the Zettelkasten-Guide Attachments Tab Enter all file extensions of the files you are likely to be using. This way all of these files will show up in the attachment bar to the right of the app After you are finished setting Zettlr up, hit \"Save\". Now Zettlr should look like a real IDE with three segments (directory tree, file list, and editor) and all settings active. Step 2: Write! \u00b6 This guide is rather short, because it only shows you how you can set up Zettlr to create a fully loaded IDE. What you are then doing with it is completely up to you. A good point to start is to read the two guides on Zettelk\u00e4sten and note-taking, because you will likely be using some concepts from these guides. Here are all resources that may be interesting for you: Guide: Zettlr as Zettelkasten Guide: Zettlr as Note-Taking App Zettlr Projects Virtual Directories Create Presentations with Zettlr Markdown for Zettlr Exporting to PDF","title":"Guide: Zettlr as an Integrated Development Environment (IDE)"},{"location":"guide-ide/#guide-zettlr-as-an-integrated-development-environment-ide","text":"Zettlr is full with functions that help your workflow. You can use it as a small note-taking app, as a Zettelkasten, or, as explained in this guide, as a fully loaded integrated development (read: writing) environment. So let's get started! Using this guide, you can set up Zettlr to be a replacement for apps such as Ulysses, Atom, or Sublime Text.","title":"Guide: Zettlr as an Integrated Development Environment (IDE)"},{"location":"guide-ide/#step-1-adjust-the-settings","text":"The first step is to adjust some of the parameters of Zettlr. So hit Cmd/Ctrl+, or press the cog in the toolbar to open the settings dialog. Adjust the following settings: General Tab Text Snippets: On Sidebar mode: Expanded Editor Tab Select all dictionaries for languages in which you will write (e.g., en-UK, de-DE, and fr-FR) Export Tab Select the Current Working Directory as the export directory Remove ZKN IDs: On Remove Tags: On Remove internal links completely Zettelkasten Tab Adjust the settings according to the Zettelkasten-Guide Attachments Tab Enter all file extensions of the files you are likely to be using. This way all of these files will show up in the attachment bar to the right of the app After you are finished setting Zettlr up, hit \"Save\". Now Zettlr should look like a real IDE with three segments (directory tree, file list, and editor) and all settings active.","title":"Step 1: Adjust the Settings"},{"location":"guide-ide/#step-2-write","text":"This guide is rather short, because it only shows you how you can set up Zettlr to create a fully loaded IDE. What you are then doing with it is completely up to you. A good point to start is to read the two guides on Zettelk\u00e4sten and note-taking, because you will likely be using some concepts from these guides. Here are all resources that may be interesting for you: Guide: Zettlr as Zettelkasten Guide: Zettlr as Note-Taking App Zettlr Projects Virtual Directories Create Presentations with Zettlr Markdown for Zettlr Exporting to PDF","title":"Step 2: Write!"},{"location":"guide-notes/","text":"Guide: Zettlr as a note-taking app \u00b6 You want to use Zettlr as a means to take notes with. Although Zettlr has a lot more features, it is designed as a slim and minimal app, so configuring Zettlr as a note-taking app is easy. This guide shows you what settings you should use and how to actually take notes. Using this guide, you can set up Zettlr to be a replacement for apps such as OneNote, Evernote, or nvALT. Step 1: Set up Zettlr to look as minimal as possible. \u00b6 First, head over to the settings tab (press Cmd/Ctrl+, or click the cog in the toolbar). In the settings, make sure you set the settings according to this list: General tab Snippets: Off Sidebar: Thin Editor tab Dictionaries: Select none (they slow down the app start and aren't necessary for simple notes) Mute lines: Off The other settings aren't needed for a note taking app and can therefore be ignored. Step 2: Create a folder for your notes \u00b6 Now it's time to create a folder for your notes. Ideally, you'd want to place it inside a cloud-synchronised folder so that you can access them everywhere, not just on your current computer. The name of this folder is completely up to you, but \"Notes\" may be a good, simple start. If you want to use different categories for notes, you can create additional root folders and keep them open. That way, you may name your categories according to what you store in them: Students: \"University\", \"Lectures\", \"Private\" Teachers: \"School\"/\"University\", \"Courses\" Researcher: \"University\", \"Research\", \"My Research Project\" Journalist: \"Topic 1\", \"Topic 2\", \"Topic 3\", \"Press Conferences\" Writer: \"My Novel\", \"Thoughts and Ideas\", \"Characters\" Administrative Worker: \"ToDo\", \"Meetings\" etc. \u2026 Choose directories using categories you personally need. Don't forget that you can always re-organise this and drag the files around if your workflow changes. The benefit of using different root folders is that each folder is independent of each other. Thereby you can always keep the directory list hidden and only pull it up if you need to switch \"notebooks\". Alternative : Instead of using multiple root folders, you can also go with the subdirectories-approach. This way the directory list doesn't look like a collection of categories, or \"notebooks\", but resembles an actual directory (I'm talking about how it looks to you, as visuals are also an important aspect for efficient writing). But the benefit of this approach is, that you never need to pull up the directories list, but you can switch \"notebooks\" by first ALT - or Ctrl -clicking the current \"notebook\"/directory and then clicking another notebook. Zettlr will then use that as the current directory in which you can store notes. Step 3: Think of a system for naming your notes \u00b6 Over time, your notebooks will become full with notes. Each seminar, each meeting and each workshop will contribute to your notebook. And if you have sudden thoughts that you want to write down before you lose them, a new note is also recommended. So what to do to not lose the order of your system? Zettlr offers several ways to order, sort, and find your files. If you know the filename, then it's easy to get to it: Simply start typing the filename in the global search bar. Zettlr will autocomplete the name for you. It takes the first file that contains what you've already written, so keep writing the filename until Zettlr autocompletes the correct file. Then hit Return and it will open the file. Generally, your files should follow a certain system. For instance, if time matters (such as for workshops, congresses, or lectures), it is best to use the date in the international standard format (YYYY-MM-DD, e.g. 2018-10-12) as the first part of your file names. This way Zettlr will automatically sort the files in the default way (where a 2 is greater than a 1, e.g.), so that newer files are at the bottom by default. To pull them to the top, simply switch the sorting from A-Z to Z-A. By using this approach it becomes easy to find older notes, because you normally remember the rough date at which a workshop or a meeting has happened and can scroll through the list until you find it. If time is not important, another approach is necessary. If you keep note files for different concepts, processes, or as some kind of manual, it may be better to use categories as the first part of the file name. For instance, if you take notes on how software in your office works, it may be good to sort them by processes. Then, filenames would look like this: HowTo - Finance - Excel HowTo - Finance - Company Database HowTo - Meetings - Beamer HowTo - Meetings - Conference Call This way you can easily find what you are looking for by first searching for the files that begin with \"HowTo\" and then scroll until you find the process (Finance, Meetings, Mail guidelines, etc). You can even use a combination of that. The bottom line is: Always keep in mind that Zettlr sorts by filename, so name your files accordingly to minimise the amount of time to spend until you find a file. Step 4: Write! \u00b6 Now that all your folders are set and you have a general idea of how your filenames should look like, you can create notes by simply hitting Cmd/Ctrl+N . Type in your name (you don't need to add any file name extension) and press Return to create the file. It will be automatically opened. Zettlr will always create the files in your currently selected notebook. If you want to move files between notebooks, simply drag the file and drop it onto the notebook you want to move it to. Next: Markdown Tutorial \u00b6 Now you may be interested in knowing how to write fast and efficiently using Zettlr. Head over to our Markdown tutorial !","title":"Guide: Zettlr as a note-taking app"},{"location":"guide-notes/#guide-zettlr-as-a-note-taking-app","text":"You want to use Zettlr as a means to take notes with. Although Zettlr has a lot more features, it is designed as a slim and minimal app, so configuring Zettlr as a note-taking app is easy. This guide shows you what settings you should use and how to actually take notes. Using this guide, you can set up Zettlr to be a replacement for apps such as OneNote, Evernote, or nvALT.","title":"Guide: Zettlr as a note-taking app"},{"location":"guide-notes/#step-1-set-up-zettlr-to-look-as-minimal-as-possible","text":"First, head over to the settings tab (press Cmd/Ctrl+, or click the cog in the toolbar). In the settings, make sure you set the settings according to this list: General tab Snippets: Off Sidebar: Thin Editor tab Dictionaries: Select none (they slow down the app start and aren't necessary for simple notes) Mute lines: Off The other settings aren't needed for a note taking app and can therefore be ignored.","title":"Step 1: Set up Zettlr to look as minimal as possible."},{"location":"guide-notes/#step-2-create-a-folder-for-your-notes","text":"Now it's time to create a folder for your notes. Ideally, you'd want to place it inside a cloud-synchronised folder so that you can access them everywhere, not just on your current computer. The name of this folder is completely up to you, but \"Notes\" may be a good, simple start. If you want to use different categories for notes, you can create additional root folders and keep them open. That way, you may name your categories according to what you store in them: Students: \"University\", \"Lectures\", \"Private\" Teachers: \"School\"/\"University\", \"Courses\" Researcher: \"University\", \"Research\", \"My Research Project\" Journalist: \"Topic 1\", \"Topic 2\", \"Topic 3\", \"Press Conferences\" Writer: \"My Novel\", \"Thoughts and Ideas\", \"Characters\" Administrative Worker: \"ToDo\", \"Meetings\" etc. \u2026 Choose directories using categories you personally need. Don't forget that you can always re-organise this and drag the files around if your workflow changes. The benefit of using different root folders is that each folder is independent of each other. Thereby you can always keep the directory list hidden and only pull it up if you need to switch \"notebooks\". Alternative : Instead of using multiple root folders, you can also go with the subdirectories-approach. This way the directory list doesn't look like a collection of categories, or \"notebooks\", but resembles an actual directory (I'm talking about how it looks to you, as visuals are also an important aspect for efficient writing). But the benefit of this approach is, that you never need to pull up the directories list, but you can switch \"notebooks\" by first ALT - or Ctrl -clicking the current \"notebook\"/directory and then clicking another notebook. Zettlr will then use that as the current directory in which you can store notes.","title":"Step 2: Create a folder for your notes"},{"location":"guide-notes/#step-3-think-of-a-system-for-naming-your-notes","text":"Over time, your notebooks will become full with notes. Each seminar, each meeting and each workshop will contribute to your notebook. And if you have sudden thoughts that you want to write down before you lose them, a new note is also recommended. So what to do to not lose the order of your system? Zettlr offers several ways to order, sort, and find your files. If you know the filename, then it's easy to get to it: Simply start typing the filename in the global search bar. Zettlr will autocomplete the name for you. It takes the first file that contains what you've already written, so keep writing the filename until Zettlr autocompletes the correct file. Then hit Return and it will open the file. Generally, your files should follow a certain system. For instance, if time matters (such as for workshops, congresses, or lectures), it is best to use the date in the international standard format (YYYY-MM-DD, e.g. 2018-10-12) as the first part of your file names. This way Zettlr will automatically sort the files in the default way (where a 2 is greater than a 1, e.g.), so that newer files are at the bottom by default. To pull them to the top, simply switch the sorting from A-Z to Z-A. By using this approach it becomes easy to find older notes, because you normally remember the rough date at which a workshop or a meeting has happened and can scroll through the list until you find it. If time is not important, another approach is necessary. If you keep note files for different concepts, processes, or as some kind of manual, it may be better to use categories as the first part of the file name. For instance, if you take notes on how software in your office works, it may be good to sort them by processes. Then, filenames would look like this: HowTo - Finance - Excel HowTo - Finance - Company Database HowTo - Meetings - Beamer HowTo - Meetings - Conference Call This way you can easily find what you are looking for by first searching for the files that begin with \"HowTo\" and then scroll until you find the process (Finance, Meetings, Mail guidelines, etc). You can even use a combination of that. The bottom line is: Always keep in mind that Zettlr sorts by filename, so name your files accordingly to minimise the amount of time to spend until you find a file.","title":"Step 3: Think of a system for naming your notes"},{"location":"guide-notes/#step-4-write","text":"Now that all your folders are set and you have a general idea of how your filenames should look like, you can create notes by simply hitting Cmd/Ctrl+N . Type in your name (you don't need to add any file name extension) and press Return to create the file. It will be automatically opened. Zettlr will always create the files in your currently selected notebook. If you want to move files between notebooks, simply drag the file and drop it onto the notebook you want to move it to.","title":"Step 4: Write!"},{"location":"guide-notes/#next-markdown-tutorial","text":"Now you may be interested in knowing how to write fast and efficiently using Zettlr. Head over to our Markdown tutorial !","title":"Next: Markdown Tutorial"},{"location":"guide-zettelkasten/","text":"Guide: Zettlr as Zettelkasten \u00b6 Zettlr can be used as a sophisticated Zettelkasten system implementing a lot of features to organise and structure your files. To begin creating your own Zettelkasten, follow the following steps. Using this guide, you can set up Zettlr to be a replacement for apps such as nvALT, zkn, or The Archive. Are you new to the concept of a Zettelkasten? Then we recommend you read our post on how a successful Zettelkasten works and watch our accompanying video ! Step 1: Adjust the settings \u00b6 The first thing you want to do to create your Zettelkasten is to have a look at your preferences. The following settings convert Zettlr into a supercharged Zettelkasten: General tab Turn the snippets on Sidebar: Thin mode. Editor tab Turn off all dictionaries Export tab Turn off the removal of Zettelkasten IDs and select to keep internal links untouched Zettelkasten tab This is the most important tab for a Zettelkasten installation, because here you can adjust the settings of how Zettlr interacts with your Zettelkasten. Please refer to the section on the Zettelkasten tab in the settings chapter to learn about these options in detail. Step 2: Create a Directory \u00b6 After you have set up the basic variables that Zettlr uses for its Zettelkasten functionality, it is time to create a directory. It is common to only have one big directory in which you can throw everything and work with this, therefore one root directory should suffice. Then you'll have a huge list of all your files on every application start and can immediately begin to work. To add a new directory to Zettlr, hit Cmd/Ctrl+O , click the first toolbar button or drag the directory from Finder or Explorer onto the app. Step 3: Write! \u00b6 Now you'll be set to use Zettlr as your Zettelkasten management system. If you want to dig deeper into how a Zettelkasten should work and what it should look like, consult the immense amount of resources on Zettelk\u00e4sten, available on the web. A good starting point is Zettelkasten.de . The authors have assembled a large list of (english) blog posts on how to supercharge your writing using a Zettelkasten.","title":"Guide: Zettlr as Zettelkasten"},{"location":"guide-zettelkasten/#guide-zettlr-as-zettelkasten","text":"Zettlr can be used as a sophisticated Zettelkasten system implementing a lot of features to organise and structure your files. To begin creating your own Zettelkasten, follow the following steps. Using this guide, you can set up Zettlr to be a replacement for apps such as nvALT, zkn, or The Archive. Are you new to the concept of a Zettelkasten? Then we recommend you read our post on how a successful Zettelkasten works and watch our accompanying video !","title":"Guide: Zettlr as Zettelkasten"},{"location":"guide-zettelkasten/#step-1-adjust-the-settings","text":"The first thing you want to do to create your Zettelkasten is to have a look at your preferences. The following settings convert Zettlr into a supercharged Zettelkasten: General tab Turn the snippets on Sidebar: Thin mode. Editor tab Turn off all dictionaries Export tab Turn off the removal of Zettelkasten IDs and select to keep internal links untouched Zettelkasten tab This is the most important tab for a Zettelkasten installation, because here you can adjust the settings of how Zettlr interacts with your Zettelkasten. Please refer to the section on the Zettelkasten tab in the settings chapter to learn about these options in detail.","title":"Step 1: Adjust the settings"},{"location":"guide-zettelkasten/#step-2-create-a-directory","text":"After you have set up the basic variables that Zettlr uses for its Zettelkasten functionality, it is time to create a directory. It is common to only have one big directory in which you can throw everything and work with this, therefore one root directory should suffice. Then you'll have a huge list of all your files on every application start and can immediately begin to work. To add a new directory to Zettlr, hit Cmd/Ctrl+O , click the first toolbar button or drag the directory from Finder or Explorer onto the app.","title":"Step 2: Create a Directory"},{"location":"guide-zettelkasten/#step-3-write","text":"Now you'll be set to use Zettlr as your Zettelkasten management system. If you want to dig deeper into how a Zettelkasten should work and what it should look like, consult the immense amount of resources on Zettelk\u00e4sten, available on the web. A good starting point is Zettelkasten.de . The authors have assembled a large list of (english) blog posts on how to supercharge your writing using a Zettelkasten.","title":"Step 3: Write!"},{"location":"guides/","text":"Guides \u00b6 Our main goal is to make all different kinds of workflows possible for everyone. So no matter if you want to use the software as a simple note-taking app or write whole books with it, everything is possible. These guides show you how you can use Zettlr in all different use cases. Simply select the purpose you intend Zettlr for. Zettlr as a note-taking app (replaces apps such as Evernote, OneNote, or nvALT) Zettlr as a Zettelkasten (replaces apps such as zkn, nvALT, or The Archive) Zettlr as an integrated development (read: writing) environment (IDE) (replaces apps such as Ulysses, Atom, or Sublime Text) Of course, there are even more use-cases: Use Zettlr to create cutting-edge presentations Create a book with Zettlr Prepare courses and workshops with Zettlr And more \u2026","title":"Guides"},{"location":"guides/#guides","text":"Our main goal is to make all different kinds of workflows possible for everyone. So no matter if you want to use the software as a simple note-taking app or write whole books with it, everything is possible. These guides show you how you can use Zettlr in all different use cases. Simply select the purpose you intend Zettlr for. Zettlr as a note-taking app (replaces apps such as Evernote, OneNote, or nvALT) Zettlr as a Zettelkasten (replaces apps such as zkn, nvALT, or The Archive) Zettlr as an integrated development (read: writing) environment (IDE) (replaces apps such as Ulysses, Atom, or Sublime Text) Of course, there are even more use-cases: Use Zettlr to create cutting-edge presentations Create a book with Zettlr Prepare courses and workshops with Zettlr And more \u2026","title":"Guides"},{"location":"install-latex/","text":"Installing LaTeX \u00b6 Markdown works best if combined with LaTeX to create beautiful PDF files. To do so, you'd have to install a TeX -distribution along Zettlr. Don't worry: You won't need to learn any LaTeX to use it. But you'd have to install it. Installing the software works exactly the same as any other software: On Windows and macOS you'll need the installer package, while on Linux you can use your packet manager to install a distribution. The recommended distributions are: Windows: MikTeX macOS: MacTex ( Attention: It suffices to install the Basic Tex, which is much smaller than the full version ) Linux: TeX Live (install the texlive-base packet: sudo apt install texlive-base ) You can install LaTeX at a later time. Simply use the menu item from the Help menu to open up the overview page where you can immediately see all available distributions.","title":"Installing LaTeX"},{"location":"install-latex/#installing-latex","text":"Markdown works best if combined with LaTeX to create beautiful PDF files. To do so, you'd have to install a TeX -distribution along Zettlr. Don't worry: You won't need to learn any LaTeX to use it. But you'd have to install it. Installing the software works exactly the same as any other software: On Windows and macOS you'll need the installer package, while on Linux you can use your packet manager to install a distribution. The recommended distributions are: Windows: MikTeX macOS: MacTex ( Attention: It suffices to install the Basic Tex, which is much smaller than the full version ) Linux: TeX Live (install the texlive-base packet: sudo apt install texlive-base ) You can install LaTeX at a later time. Simply use the menu item from the Help menu to open up the overview page where you can immediately see all available distributions.","title":"Installing LaTeX"},{"location":"install-pandoc/","text":"Installing Pandoc \u00b6 What makes Zettlr interact with other software such as Microsoft Word, Wiki-systems or OpenOffice is an additional software package called Pandoc . Pandoc is free and Open Source and it allows you to use all exporting and importing features of Zettlr, making it the ideal choice to be the interface between other programs and co-workers who do not use Markdown. Installing Pandoc is easy on all platforms. You can install Pandoc at any time. Simply use the menu item from the Help menu to open up the installation instructions. Windows \u00b6 On Windows, Pandoc can be installed by visiting the download page and retrieving the Windows installer. Simply execute it. Afterwards, it should be installed correctly. Try to export something. If it works, you're done! Please note that due to the fact that Pandoc is a CLI-program (Command Line Interface), it cannot show you whether or not there is an update available. You'll have to do this yourself. Simply visit the download page from time to time. macOS \u00b6 On macOS, Pandoc can be installed in a variety of ways. Install using the official installer \u00b6 To install Pandoc the old way, simply head over to the download page and get the macOS installer. Once it is done, pandoc should be available on your system. Try to export something. If it works, you're done! Recommended method: Homebrew \u00b6 The preferred method is Homebrew . Homebrew is a packet manager that makes it easy to install command line programs such as pandoc and makes it easy to maintain it. Make sure to install Homebrew correctly , and then simply run the following command in the Terminal: $ brew install pandoc To update pandoc from time to time, use this command: $ brew upgrade This will upgrade all installed formulae (as they are called) to the newest version. Installing with Homebrew is recommended, as it is not only faster, but also more convenient. Linux \u00b6 On Linux, installing Pandoc is hilariously simple. Simply use your packet manager to search for, and install Pandoc. The provided packages aren't always up-to-date, but they should fit. If you want to install the newest version, you'd have to download the Linux installer and follow the install instructions on the Pandoc site.","title":"Installing Pandoc"},{"location":"install-pandoc/#installing-pandoc","text":"What makes Zettlr interact with other software such as Microsoft Word, Wiki-systems or OpenOffice is an additional software package called Pandoc . Pandoc is free and Open Source and it allows you to use all exporting and importing features of Zettlr, making it the ideal choice to be the interface between other programs and co-workers who do not use Markdown. Installing Pandoc is easy on all platforms. You can install Pandoc at any time. Simply use the menu item from the Help menu to open up the installation instructions.","title":"Installing Pandoc"},{"location":"install-pandoc/#windows","text":"On Windows, Pandoc can be installed by visiting the download page and retrieving the Windows installer. Simply execute it. Afterwards, it should be installed correctly. Try to export something. If it works, you're done! Please note that due to the fact that Pandoc is a CLI-program (Command Line Interface), it cannot show you whether or not there is an update available. You'll have to do this yourself. Simply visit the download page from time to time.","title":"Windows"},{"location":"install-pandoc/#macos","text":"On macOS, Pandoc can be installed in a variety of ways.","title":"macOS"},{"location":"install-pandoc/#install-using-the-official-installer","text":"To install Pandoc the old way, simply head over to the download page and get the macOS installer. Once it is done, pandoc should be available on your system. Try to export something. If it works, you're done!","title":"Install using the official installer"},{"location":"install-pandoc/#recommended-method-homebrew","text":"The preferred method is Homebrew . Homebrew is a packet manager that makes it easy to install command line programs such as pandoc and makes it easy to maintain it. Make sure to install Homebrew correctly , and then simply run the following command in the Terminal: $ brew install pandoc To update pandoc from time to time, use this command: $ brew upgrade This will upgrade all installed formulae (as they are called) to the newest version. Installing with Homebrew is recommended, as it is not only faster, but also more convenient.","title":"Recommended method: Homebrew"},{"location":"install-pandoc/#linux","text":"On Linux, installing Pandoc is hilariously simple. Simply use your packet manager to search for, and install Pandoc. The provided packages aren't always up-to-date, but they should fit. If you want to install the newest version, you'd have to download the Linux installer and follow the install instructions on the Pandoc site.","title":"Linux"},{"location":"install/","text":"Installation \u00b6 The installation of Zettlr is very easy and takes only a step on every operating system. Zettlr is cross-platform, so it will run on your system, no matter which one. Zettlr comes pre-built for macOS, Windows and Debian-based and RedHat-based Linux systems (Ubuntu, Gnome, Xubuntu, Kubuntu, Fedora, RedHat and the like). If you want to run Zettlr on other Linux-Systems like Arch or on ARM-devices (such as a Raspberry), you'd have to create a package by yourself. There's plenty of easy tutorials on how to build electron apps on the web. Please refer to the supported platforms for electron apps to stay up to date which platforms are supported. Windows (7 or newer) \u00b6 To install Zettlr on Windows, just download the installer executable from the latest release and double click to open it. If you wish to install Zettlr for all users, it is installed to the main Program Files -Directory\u2014in this case you'd have to give it elevated rights during setup (it will automatically ask for your permission). You don't need any rights if you install it for yourself. To uninstall Zettlr, simply run the Uninstall.exe either from the directory itself or use the comfortable option in your system's settings. If you want to completely remove all data associated with the app, also remove the directory C:\\Users\\<your-user-name>\\AppData\\Roaming\\Zettlr . macOS (10.10 or newer) \u00b6 To install Zettlr on macOS, simply download the dmg-file from the latest release and mount it. Then drag the Zettlr-icon into your Applications directory and you're done! To uninstall Zettlr, simply remove the Zettlr.app from your Applications directory. If you want to completely remove all data associated with the app, also remove the directory /Users/<your-user-name>/Library/Application Support/Zettlr . Linux (Debian 8/Ubuntu 12.04/Fedora 21 or newer) \u00b6 There are prebuilt deb - and rpm -packages for linux systems. Simply install the package on your system. To uninstall, follow the usual steps it takes to remove a package (usually through the graphical installer application or via dpkg ). If you also want to remove all data associated with the app, also delete the /home/<your-user-name>/.config/Zettlr directory. Updating the app \u00b6 The application checks for new updates each time you start the app. You can also manually trigger the search for updates by using the respective menu item from the Help-menu. If there is a new version available, Zettlr will show you a dialog that contains both the new version's number, your current version and a changelog with all features and bug fixes the new version contains. You can then open the download page to download the new package. Simply install it over your current installation, it will take care of removing the old version first. All data will be retained and migrated to the new version. Additional Software \u00b6 To use the powerful import and export features of Zettlr, make sure to also install Pandoc and LaTeX : Installing Pandoc Installing LaTeX","title":"Installation"},{"location":"install/#installation","text":"The installation of Zettlr is very easy and takes only a step on every operating system. Zettlr is cross-platform, so it will run on your system, no matter which one. Zettlr comes pre-built for macOS, Windows and Debian-based and RedHat-based Linux systems (Ubuntu, Gnome, Xubuntu, Kubuntu, Fedora, RedHat and the like). If you want to run Zettlr on other Linux-Systems like Arch or on ARM-devices (such as a Raspberry), you'd have to create a package by yourself. There's plenty of easy tutorials on how to build electron apps on the web. Please refer to the supported platforms for electron apps to stay up to date which platforms are supported.","title":"Installation"},{"location":"install/#windows-7-or-newer","text":"To install Zettlr on Windows, just download the installer executable from the latest release and double click to open it. If you wish to install Zettlr for all users, it is installed to the main Program Files -Directory\u2014in this case you'd have to give it elevated rights during setup (it will automatically ask for your permission). You don't need any rights if you install it for yourself. To uninstall Zettlr, simply run the Uninstall.exe either from the directory itself or use the comfortable option in your system's settings. If you want to completely remove all data associated with the app, also remove the directory C:\\Users\\<your-user-name>\\AppData\\Roaming\\Zettlr .","title":"Windows (7 or newer)"},{"location":"install/#macos-1010-or-newer","text":"To install Zettlr on macOS, simply download the dmg-file from the latest release and mount it. Then drag the Zettlr-icon into your Applications directory and you're done! To uninstall Zettlr, simply remove the Zettlr.app from your Applications directory. If you want to completely remove all data associated with the app, also remove the directory /Users/<your-user-name>/Library/Application Support/Zettlr .","title":"macOS (10.10 or newer)"},{"location":"install/#linux-debian-8ubuntu-1204fedora-21-or-newer","text":"There are prebuilt deb - and rpm -packages for linux systems. Simply install the package on your system. To uninstall, follow the usual steps it takes to remove a package (usually through the graphical installer application or via dpkg ). If you also want to remove all data associated with the app, also delete the /home/<your-user-name>/.config/Zettlr directory.","title":"Linux (Debian 8/Ubuntu 12.04/Fedora 21 or newer)"},{"location":"install/#updating-the-app","text":"The application checks for new updates each time you start the app. You can also manually trigger the search for updates by using the respective menu item from the Help-menu. If there is a new version available, Zettlr will show you a dialog that contains both the new version's number, your current version and a changelog with all features and bug fixes the new version contains. You can then open the download page to download the new package. Simply install it over your current installation, it will take care of removing the old version first. All data will be retained and migrated to the new version.","title":"Updating the app"},{"location":"install/#additional-software","text":"To use the powerful import and export features of Zettlr, make sure to also install Pandoc and LaTeX : Installing Pandoc Installing LaTeX","title":"Additional Software"},{"location":"localisation/","text":"Localisation \u00b6 Zettlr is not only capable of importing and exporting a lot of different formats, it also provides you with the possibility to translate the GUI and use your preferred spellchecking dictionaries. You can easily import new dictionaries and translate the user interface to your likings. Zettlr comes shipped with the following languages: English (United Kingdom) English (United States) German (Germany) French (France) The app includes the following dictionaries: English (United Kingdom) English (United States) German (Germany) French (France) Spanish (Spain) Dutch (Netherlands) Turkish Russian Ukrainian Install new dictionaries \u00b6 Of course, you may want to install new dictionaries for languages you write in that are not shipped with the app. It is easy to do so. Zettlr uses the popular Hunspell dictionaries that are also used by well-known software such as LibreOffice or Mozilla apps. To enable spell-checking for a specific language, simply open the user dictionary folder by selecting File -> Import Dictionary \u2026 from the menu. Zettlr will then open up the folder in which you need to place the dictionary files. The dictionary consists of two files, one is a .dic -file, and the other is an .aff -file. They need to be placed inside a folder that is named after the language you want to import. Let us assume you want to import the dictionary for Portuguese. You need to grab it from some repository, for instance the GitHub user wooorm has an extensive set . Then you simply need to make sure the folder is named pt-PT and the two files are named pt-PT.dic and pt-PT.aff . Other files inside the directory will be ignored by Zettlr. As soon as you have placed your files inside the dict -directory, open the preferences and Zettlr should list your newly imported dictionary! Hint: Zettlr tries to translate the language strings automatically, but in some cases it may happen that Zettlr does not contain translations for specific languages. In this case, Zettlr will fallback to the language code and display it as, e.g., pt-PT . Translate the App \u00b6 To help translate the app, please refer to the Get Involved page .","title":"Localisation"},{"location":"localisation/#localisation","text":"Zettlr is not only capable of importing and exporting a lot of different formats, it also provides you with the possibility to translate the GUI and use your preferred spellchecking dictionaries. You can easily import new dictionaries and translate the user interface to your likings. Zettlr comes shipped with the following languages: English (United Kingdom) English (United States) German (Germany) French (France) The app includes the following dictionaries: English (United Kingdom) English (United States) German (Germany) French (France) Spanish (Spain) Dutch (Netherlands) Turkish Russian Ukrainian","title":"Localisation"},{"location":"localisation/#install-new-dictionaries","text":"Of course, you may want to install new dictionaries for languages you write in that are not shipped with the app. It is easy to do so. Zettlr uses the popular Hunspell dictionaries that are also used by well-known software such as LibreOffice or Mozilla apps. To enable spell-checking for a specific language, simply open the user dictionary folder by selecting File -> Import Dictionary \u2026 from the menu. Zettlr will then open up the folder in which you need to place the dictionary files. The dictionary consists of two files, one is a .dic -file, and the other is an .aff -file. They need to be placed inside a folder that is named after the language you want to import. Let us assume you want to import the dictionary for Portuguese. You need to grab it from some repository, for instance the GitHub user wooorm has an extensive set . Then you simply need to make sure the folder is named pt-PT and the two files are named pt-PT.dic and pt-PT.aff . Other files inside the directory will be ignored by Zettlr. As soon as you have placed your files inside the dict -directory, open the preferences and Zettlr should list your newly imported dictionary! Hint: Zettlr tries to translate the language strings automatically, but in some cases it may happen that Zettlr does not contain translations for specific languages. In this case, Zettlr will fallback to the language code and display it as, e.g., pt-PT .","title":"Install new dictionaries"},{"location":"localisation/#translate-the-app","text":"To help translate the app, please refer to the Get Involved page .","title":"Translate the App"},{"location":"markdown-basics/","text":"Markdown basics \u00b6 Zettlr makes, as a bunch of other apps, use of the now round about fourteen year old format Markdown , originally invented by John Gruber. Of course, over such a long period of time, a huge number of developments have taken place, that have created the possibilities of modern Markdown applications. In this document the following topics are covered: A brief history of Markdown Current implementations of Markdown (and differences in their syntax) How Zettlr implements Markdown Markdown 101: Headings, block elements, inline elements, links, images and footnotes Further resources A brief history \u00b6 Since the personal computer became widely available in the 1990s, there were two groups of formats existing side-by-side: word processor documents, such as .doc , or .odt and code documents, such as .js , .cpp or .py . Both groups of documents contains human-readable text, but there was one simple, yet huge difference: While JavaScript-files or C++-files contained plain text (i.e. only the text that you would see when you open such a file), word processor documents contained a lot more stuff. Word processor documents always hold information about the page size (e.g., A4 or letter), how different blocks should be formatted (e.g., the font of headings or how much blockquotes are indented). If you open a Word/Office-document on your PC right now, you can see what I mean: You immediately see what is a heading based on the font-size font-weight of its text. For a long time, both these groups of documents stayed as distinct as would their users. Most office-workers only know how to use Microsoft Word or Excel, maybe also LibreOffice-implementations, while close to nobody coming from a STEM-background would voluntarily use Word or similar software. Those scientists, for instance, that work in STEM, have also developed a programming language called LaTeX, which allows them to create neatly formatted PDF-files from a bunch of code\u2014they follow the same workflow as researchers from the arts and humanities or regular administrative officers, but use different documents for that. When Markdown was inaugurated by John Gruber in 2004, it was basically like saying: \"Why not both?\" Markdown combines both the clear reading experience from word processor documents with the benefits of software code documents, which is both versatile and easy to use\u2014even for people that only know how to operate Word or Writer. One small example: While in word processors you would create a heading by typing some text and then selecting the Heading 1 format from some menu, in Markdown you would simply type # some text , where the hashtag-symbol tells you immediately: \"This is a heading of first order!\" At first, Markdown was basically a small script John Gruber wrote for himself to yield these benefits, and it contained a lot of inconsistencies and didn't support many different elements. But over the years, progress was made. Two dates are notable: 2004: John Gruber initially launches Markdown 2012: A group of developers form CommonMark to standardise Markdown into an internationally accepted norm. Markdown implementations \u00b6 Today, several implementations of the Markdown syntax exist. The most noteworthy are: MultiMarkdown : Extends the initial syntax with footnotes, tables and some metadata Markdown Extra : Again some additions to the initial syntax GitHub Flavoured Markdown : This is a variety of Markdown invented by the hosting platform GitHub (which Zettlr is also hosted on!) and is today one of the most common syntaxes. Pandoc Markdown : Pandoc Markdown is a superset of GitHub flavoured Markdown and adds support for even more elements. CommonMark : Tries to implement all possible elements, while being unambiguous. Zettlr and Markdown \u00b6 Zettlr itself implements a mixture. The editor itself highlights only GitHub flavoured Markdown (plus some extra-elements, which extends Markdown syntax with Zettelkasten elements. Those are described in the respective chapter on the Zettelkasten method ). If you export your documents to HTML, Zettlr will convert your documents using the GitHub flavoured Markdown syntax . If you export to Word, LibreOffice or PDF, Zettlr uses Pandoc, which itself converts your Markdown documents using its Pandoc Markdown syntax . But Zettlr doesn't confine you to writing Markdown. If you wish, you can also add LaTeX -commands. These commands are correctly interpreted when you convert to PDF. These are omitted when you convert to DOCX or ODT. And they are retained when you convert to HTML. Of course, you can at any position use plain HTML-code as well. Markdown 101: The most important codes \u00b6 Although Markdown can do a lot of things, in this section I want to describe to you the most important elements that you will use the most, and how you can use them in Zettlr. Headings \u00b6 Headings are straightforward. They must be put on their own line and have to be indicated using a hashtag symbol. There are six levels of headings at your disposal: # Heading text \u2014 yields a heading of first order ## Heading text \u2014 yields a heading of second order ### Heading text \u2014 yields a heading of third order #### Heading text \u2014 yields a heading of fourth order ##### Heading text \u2014 yields a heading of fifth order ###### Heading text \u2014 yields a heading of sixth order Inline-formatting \u00b6 Of course, just as in word processors you can use inline-formatting, such as bold or italic text, or monospaced (code) text. **your text** \u2014 yields bold text _your text_ \u2014 yields bold text `your text` \u2014 yields monospaced text Block elements \u00b6 Sometimes, you may want to emphasise a whole block of text (such as a longer quote), or create lists. This is also possible and extremely simple using Markdown. Begin unsorted, itemised lists by simply beginning the line with a - , a * or a + character. Sorted lists need numbers in the format 1. in font of them. Note : The numbers do not have to be in order. On each export, the converter will automatically correctly number them ascending, so a list containing the list numbers 1, 6, 14, 2 will be rendered as a list using the numbers 1, 2, 3, 4! Links and images \u00b6 Links are inline-elements and images are block elements, so they follow the same semantics as the elements discussed above. Yet they deserve a little bit more attention, because they offer you more options. Links are set using the following syntax: [This text will appear in your final document](http://this-is-your-actual-link.tld) Zettlr will automatically convert this syntax to a clickable link (follow the link target by clicking on it while holding down the ALT -key) for the easy of access (and to shorten those rather long links). Images are placed exactly like links, with two differences: a) they have to be on their own line, and b) they start with an exclamation mark (!). Images of course also need a path, because you won't store them in a plain text document. Therefore you can use three different approaches to linking images in your document: Use an absolute web-URL, such as https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/1000px-Markdown-mark.svg.pngMarkdown. Use an absolute path to a file on your own computer, such as C:\\Users\\user-name\\Pictures\\my-image.jpg . Use a relative path to a file on your own computer, such as ../img/my-image.png . The relative path is always relative to the document in which you place it. The directory .. tells Zettlr to look for the image in the parent directory (i.e. to traverse up one directory). If you store your documents in a cloud and access them on different devices, you would naturally use relative image paths, because the absolute paths will definitely differ (especially if you work with two different operating systems). Try to insert images and links always using their shortcuts, Cmd/Ctrl+K for links and Cmd/Ctrl+Shift+I for images. If you have a valid path in your clipboard, it will even automatically insert it for you, making your life easy. The best way to insert a link, for instance, would therefore be to first copy the link to your clipboard, then select the text you want to link and third press Cmd/Ctrl+K . Then the selected text will become the displayed link text and the link from your clipboard will be used as the link target. Footnotes \u00b6 Footnotes are what most researchers in arts and humanities are of course interested in. So here some general rules for inserting footnotes and how Zettlr interacts with them. According to standard Markdown syntax, footnotes require two elements: First the reference somewhere in the text in the format [^x] . The x stands for a unique identifier. Basically, you can use anything you want, as long as this identifier is not used by a second footnote as well. But normally, you will want to stick with ascending numbers, of course. (Also: These numbers don't have to be in order\u2014as long as you export your Markdown document using Pandoc to convert it into ODT, DOCX or PDF, Pandoc will automatically re-number the footnotes correctly. So if you decide to delete a footnote later on, don't worry that the numbers won't neatly match up in your document anymore.) The second element footnotes require is a block element, the footnote reference text . It is always in the following format: [^x]: Your reference text. As you can see, the identifier is a replica of your reference that appears in the text, only now it is followed by a colon. It is common sense that you put your references in a list at the very end of your document. Yet, this jumping back and forth between the reference text and your footnote reference is cumbersome, and therefore Zettlr tries to ease your life. For now, it does so by automatically showing to you what the reference text of a footnote is when you hover over the footnote. Also, you can simply add a footnote, which will put a reference to it at your current cursor position and add a footnote at the bottom of your document. Fenced code blocks \u00b6 Zettlr also supports so-called \"fenced code blocks.\" These are the block-version of the inline code element. To start a code block, type three backticks \"`\" in a row on an empty line. Close the code block again with three back ticks on an empty line. Everything in between those two \"fences\" will be rendered using monospace font to indicate that this is indeed code. Zettlr also supports advanced syntax highlighting for several script and programming languages. You have to tell Zettlr explicitly which language to use by simply adding its identifier directly after the introducing code fence . So to direct Zettlr to highlight a code fence using a JavaScript interpreter, you would need to begin the code block with three backticks, directly followed by the word \"javascript\" on an empty line. Currently, the following languages are supported by the engine (the names in braces are the identifiers you would need to use in Zettlr, as they do not contain special characters, which might upset an engine): C (c) C# (csharp) C++ (cpp) CSS (css) Go (go) Java (java) JavaScript (javascript) Kotlin (kotlin) LESS (less) Objective C (objectivec) PHP (php) Python (python) R (r) Ruby (ruby) SQL (sql) Swift (swift) Shell/Bash YAML (yaml) More languages can be implemented on your request. I did not want to implement all at first to not bloat the engine. If you need a specific language, please refer to the available ones and open up an issue on GitHub, so that I know which one I should include! Resources on Markdown \u00b6 Do you want to learn all about Markdown? That is great! A good resource that covers all elements is to be found on Learn X in Y minutes Markdown. If you want to get used to writing clean and unambiguous Markdown, view the specifications by CommonMark . Also, there's a \"book\" on the GitHub flavoured Markdown syntax. View it here Markdown.","title":"Markdown basics"},{"location":"markdown-basics/#markdown-basics","text":"Zettlr makes, as a bunch of other apps, use of the now round about fourteen year old format Markdown , originally invented by John Gruber. Of course, over such a long period of time, a huge number of developments have taken place, that have created the possibilities of modern Markdown applications. In this document the following topics are covered: A brief history of Markdown Current implementations of Markdown (and differences in their syntax) How Zettlr implements Markdown Markdown 101: Headings, block elements, inline elements, links, images and footnotes Further resources","title":"Markdown basics"},{"location":"markdown-basics/#a-brief-history","text":"Since the personal computer became widely available in the 1990s, there were two groups of formats existing side-by-side: word processor documents, such as .doc , or .odt and code documents, such as .js , .cpp or .py . Both groups of documents contains human-readable text, but there was one simple, yet huge difference: While JavaScript-files or C++-files contained plain text (i.e. only the text that you would see when you open such a file), word processor documents contained a lot more stuff. Word processor documents always hold information about the page size (e.g., A4 or letter), how different blocks should be formatted (e.g., the font of headings or how much blockquotes are indented). If you open a Word/Office-document on your PC right now, you can see what I mean: You immediately see what is a heading based on the font-size font-weight of its text. For a long time, both these groups of documents stayed as distinct as would their users. Most office-workers only know how to use Microsoft Word or Excel, maybe also LibreOffice-implementations, while close to nobody coming from a STEM-background would voluntarily use Word or similar software. Those scientists, for instance, that work in STEM, have also developed a programming language called LaTeX, which allows them to create neatly formatted PDF-files from a bunch of code\u2014they follow the same workflow as researchers from the arts and humanities or regular administrative officers, but use different documents for that. When Markdown was inaugurated by John Gruber in 2004, it was basically like saying: \"Why not both?\" Markdown combines both the clear reading experience from word processor documents with the benefits of software code documents, which is both versatile and easy to use\u2014even for people that only know how to operate Word or Writer. One small example: While in word processors you would create a heading by typing some text and then selecting the Heading 1 format from some menu, in Markdown you would simply type # some text , where the hashtag-symbol tells you immediately: \"This is a heading of first order!\" At first, Markdown was basically a small script John Gruber wrote for himself to yield these benefits, and it contained a lot of inconsistencies and didn't support many different elements. But over the years, progress was made. Two dates are notable: 2004: John Gruber initially launches Markdown 2012: A group of developers form CommonMark to standardise Markdown into an internationally accepted norm.","title":"A brief history"},{"location":"markdown-basics/#markdown-implementations","text":"Today, several implementations of the Markdown syntax exist. The most noteworthy are: MultiMarkdown : Extends the initial syntax with footnotes, tables and some metadata Markdown Extra : Again some additions to the initial syntax GitHub Flavoured Markdown : This is a variety of Markdown invented by the hosting platform GitHub (which Zettlr is also hosted on!) and is today one of the most common syntaxes. Pandoc Markdown : Pandoc Markdown is a superset of GitHub flavoured Markdown and adds support for even more elements. CommonMark : Tries to implement all possible elements, while being unambiguous.","title":"Markdown implementations"},{"location":"markdown-basics/#zettlr-and-markdown","text":"Zettlr itself implements a mixture. The editor itself highlights only GitHub flavoured Markdown (plus some extra-elements, which extends Markdown syntax with Zettelkasten elements. Those are described in the respective chapter on the Zettelkasten method ). If you export your documents to HTML, Zettlr will convert your documents using the GitHub flavoured Markdown syntax . If you export to Word, LibreOffice or PDF, Zettlr uses Pandoc, which itself converts your Markdown documents using its Pandoc Markdown syntax . But Zettlr doesn't confine you to writing Markdown. If you wish, you can also add LaTeX -commands. These commands are correctly interpreted when you convert to PDF. These are omitted when you convert to DOCX or ODT. And they are retained when you convert to HTML. Of course, you can at any position use plain HTML-code as well.","title":"Zettlr and Markdown"},{"location":"markdown-basics/#markdown-101-the-most-important-codes","text":"Although Markdown can do a lot of things, in this section I want to describe to you the most important elements that you will use the most, and how you can use them in Zettlr.","title":"Markdown 101: The most important codes"},{"location":"markdown-basics/#headings","text":"Headings are straightforward. They must be put on their own line and have to be indicated using a hashtag symbol. There are six levels of headings at your disposal: # Heading text \u2014 yields a heading of first order ## Heading text \u2014 yields a heading of second order ### Heading text \u2014 yields a heading of third order #### Heading text \u2014 yields a heading of fourth order ##### Heading text \u2014 yields a heading of fifth order ###### Heading text \u2014 yields a heading of sixth order","title":"Headings"},{"location":"markdown-basics/#inline-formatting","text":"Of course, just as in word processors you can use inline-formatting, such as bold or italic text, or monospaced (code) text. **your text** \u2014 yields bold text _your text_ \u2014 yields bold text `your text` \u2014 yields monospaced text","title":"Inline-formatting"},{"location":"markdown-basics/#block-elements","text":"Sometimes, you may want to emphasise a whole block of text (such as a longer quote), or create lists. This is also possible and extremely simple using Markdown. Begin unsorted, itemised lists by simply beginning the line with a - , a * or a + character. Sorted lists need numbers in the format 1. in font of them. Note : The numbers do not have to be in order. On each export, the converter will automatically correctly number them ascending, so a list containing the list numbers 1, 6, 14, 2 will be rendered as a list using the numbers 1, 2, 3, 4!","title":"Block elements"},{"location":"markdown-basics/#links-and-images","text":"Links are inline-elements and images are block elements, so they follow the same semantics as the elements discussed above. Yet they deserve a little bit more attention, because they offer you more options. Links are set using the following syntax: [This text will appear in your final document](http://this-is-your-actual-link.tld) Zettlr will automatically convert this syntax to a clickable link (follow the link target by clicking on it while holding down the ALT -key) for the easy of access (and to shorten those rather long links). Images are placed exactly like links, with two differences: a) they have to be on their own line, and b) they start with an exclamation mark (!). Images of course also need a path, because you won't store them in a plain text document. Therefore you can use three different approaches to linking images in your document: Use an absolute web-URL, such as https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/1000px-Markdown-mark.svg.pngMarkdown. Use an absolute path to a file on your own computer, such as C:\\Users\\user-name\\Pictures\\my-image.jpg . Use a relative path to a file on your own computer, such as ../img/my-image.png . The relative path is always relative to the document in which you place it. The directory .. tells Zettlr to look for the image in the parent directory (i.e. to traverse up one directory). If you store your documents in a cloud and access them on different devices, you would naturally use relative image paths, because the absolute paths will definitely differ (especially if you work with two different operating systems). Try to insert images and links always using their shortcuts, Cmd/Ctrl+K for links and Cmd/Ctrl+Shift+I for images. If you have a valid path in your clipboard, it will even automatically insert it for you, making your life easy. The best way to insert a link, for instance, would therefore be to first copy the link to your clipboard, then select the text you want to link and third press Cmd/Ctrl+K . Then the selected text will become the displayed link text and the link from your clipboard will be used as the link target.","title":"Links and images"},{"location":"markdown-basics/#footnotes","text":"Footnotes are what most researchers in arts and humanities are of course interested in. So here some general rules for inserting footnotes and how Zettlr interacts with them. According to standard Markdown syntax, footnotes require two elements: First the reference somewhere in the text in the format [^x] . The x stands for a unique identifier. Basically, you can use anything you want, as long as this identifier is not used by a second footnote as well. But normally, you will want to stick with ascending numbers, of course. (Also: These numbers don't have to be in order\u2014as long as you export your Markdown document using Pandoc to convert it into ODT, DOCX or PDF, Pandoc will automatically re-number the footnotes correctly. So if you decide to delete a footnote later on, don't worry that the numbers won't neatly match up in your document anymore.) The second element footnotes require is a block element, the footnote reference text . It is always in the following format: [^x]: Your reference text. As you can see, the identifier is a replica of your reference that appears in the text, only now it is followed by a colon. It is common sense that you put your references in a list at the very end of your document. Yet, this jumping back and forth between the reference text and your footnote reference is cumbersome, and therefore Zettlr tries to ease your life. For now, it does so by automatically showing to you what the reference text of a footnote is when you hover over the footnote. Also, you can simply add a footnote, which will put a reference to it at your current cursor position and add a footnote at the bottom of your document.","title":"Footnotes"},{"location":"markdown-basics/#fenced-code-blocks","text":"Zettlr also supports so-called \"fenced code blocks.\" These are the block-version of the inline code element. To start a code block, type three backticks \"`\" in a row on an empty line. Close the code block again with three back ticks on an empty line. Everything in between those two \"fences\" will be rendered using monospace font to indicate that this is indeed code. Zettlr also supports advanced syntax highlighting for several script and programming languages. You have to tell Zettlr explicitly which language to use by simply adding its identifier directly after the introducing code fence . So to direct Zettlr to highlight a code fence using a JavaScript interpreter, you would need to begin the code block with three backticks, directly followed by the word \"javascript\" on an empty line. Currently, the following languages are supported by the engine (the names in braces are the identifiers you would need to use in Zettlr, as they do not contain special characters, which might upset an engine): C (c) C# (csharp) C++ (cpp) CSS (css) Go (go) Java (java) JavaScript (javascript) Kotlin (kotlin) LESS (less) Objective C (objectivec) PHP (php) Python (python) R (r) Ruby (ruby) SQL (sql) Swift (swift) Shell/Bash YAML (yaml) More languages can be implemented on your request. I did not want to implement all at first to not bloat the engine. If you need a specific language, please refer to the available ones and open up an issue on GitHub, so that I know which one I should include!","title":"Fenced code blocks"},{"location":"markdown-basics/#resources-on-markdown","text":"Do you want to learn all about Markdown? That is great! A good resource that covers all elements is to be found on Learn X in Y minutes Markdown. If you want to get used to writing clean and unambiguous Markdown, view the specifications by CommonMark . Also, there's a \"book\" on the GitHub flavoured Markdown syntax. View it here Markdown.","title":"Resources on Markdown"},{"location":"pomodoro/","text":"Pomodoro-Timer \u00b6 If you write a lot, the time may come that you need to organise your time better. The built-in Pomodoro-Timer can help you with this. Access the Pomodoro-Timer by clicking on the circle in the top right corner of the screen, inside the Toolbar. Don't know what a pomodoro timer is? Then head over to the official website ! Using the Pomodoro-Timer \u00b6 Before you start the pomodoro timer, you can adapt some settings. The red number indicates the amount of minutes used to work . The default is 25 minutes. The yellow number indicates the duration of a short break that will divide portions of work. After each work-phase there will be a short break. The default is 5 minutes. The green number tells Zettlr, how long a long break should be. After every four tasks, there will be such a long break. The default duration is 20 minutes. Below, you can decide whether or not a sound should be played each time a phase has ended. The slider below the checkbox adjusts the volume. ( Attention : This is not your system volume, so if your system's volume is only at 20 percent, even a volume of 100 percent inside Zettlr will only sound as loud as 20 percent!) Click on Start to begin the timer. Then, the circle will be filled with the color of the current phase (either red, yellow, or green). Once it is full, the next phase will begin. To Stop the timer or simply review the current status of the timer, click on the circle again. A small popup will tell you the remaining amount of time for the current phase, the type of the current phase and give you the option to stop. The cycle of the pomodoro timer is as follows: Work Short break Work Short break Work Short break Work Long break Repeat from step 1","title":"Pomodoro-Timer"},{"location":"pomodoro/#pomodoro-timer","text":"If you write a lot, the time may come that you need to organise your time better. The built-in Pomodoro-Timer can help you with this. Access the Pomodoro-Timer by clicking on the circle in the top right corner of the screen, inside the Toolbar. Don't know what a pomodoro timer is? Then head over to the official website !","title":"Pomodoro-Timer"},{"location":"pomodoro/#using-the-pomodoro-timer","text":"Before you start the pomodoro timer, you can adapt some settings. The red number indicates the amount of minutes used to work . The default is 25 minutes. The yellow number indicates the duration of a short break that will divide portions of work. After each work-phase there will be a short break. The default is 5 minutes. The green number tells Zettlr, how long a long break should be. After every four tasks, there will be such a long break. The default duration is 20 minutes. Below, you can decide whether or not a sound should be played each time a phase has ended. The slider below the checkbox adjusts the volume. ( Attention : This is not your system volume, so if your system's volume is only at 20 percent, even a volume of 100 percent inside Zettlr will only sound as loud as 20 percent!) Click on Start to begin the timer. Then, the circle will be filled with the color of the current phase (either red, yellow, or green). Once it is full, the next phase will begin. To Stop the timer or simply review the current status of the timer, click on the circle again. A small popup will tell you the remaining amount of time for the current phase, the type of the current phase and give you the option to stop. The cycle of the pomodoro timer is as follows: Work Short break Work Short break Work Short break Work Long break Repeat from step 1","title":"Using the Pomodoro-Timer"},{"location":"presentations/","text":"Presentations \u00b6 Since version 0.19.0 , Zettlr is able to export your Markdown files directly as presentation files using the reveal.js -framework. reveal.js is a lightweight solution for creating super compatible presentations using plain HTML and JavaScript . Therefore, these presentations can be shown on all computers that run a browser \u2014 nowadays this means: they run on every computer. For exporting Markdown files to reveal.js , you have to make sure Pandoc is installed on your computer. Head over to the section on exporting to see how to install pandoc. If you first want to be impressed by an actual export from Zettlr into reveal.js , please have a look at the demonstration presentation ! You can also read the source file while following the instructions on this page. Pre-considerations \u00b6 Of course, a Markdown document that should be compiled into a presentation has a slightly different structure than other Markdown documents. Creating slides \u00b6 You can create new slides in two ways. First, each heading level 1 will begin a new slide and also act as the title of the slide. But in case the heading level 1 is too big for your taste, or you simply don't want a title on that slide, you can also delimit slides by using Markdown dividers (either *** or --- ). Everything that follows the heading or the divider will end up being the content of the slides. You do not have to explicitly \"end\" the last slide with a divider. Using Markdown elements \u00b6 Inside the slides, you can use all Markdown elements. They will be rendered as you would expect them. You can even use footnotes which will then be placed on their own, respective slide at the end! Advanced Tools \u00b6 Of course, reveal.js presentations also have the same versatility as PowerPoint or Impress when it comes to controlling your presentation. For instance, you can use CSS-classes to tell the presentation that certain elements should be triggered before forwarding the presentation. These are called \"fragments\". Due to limitations in Pandoc's engine, you'll have to use plain HTML to achieve this. Consider, for instance, the HTML code from the demo presentation: <ul> <li class=\"fragment fade-in\">This item will fade in.</li> <li class=\"fragment highlight-blue\">This will be highlighted blue.</li> <li class=\"fragment highlight-red\">All available transitions are documented [here](https://github.com/hakimel/reveal.js/#fragments).</li> </ul> This will create a list with three items. All items are \"fragments\", which means that by pressing the shortcut for the next slide, the first will fade-in , as the class says. On the next press of the right arrow key, the second item will be highlighted in blue color. The third press of the right arrow key will highlight the last item red. And on the fourth press of the arrow key the next slide will be shown. Presentation settings \u00b6 Of course, the presentation itself also has settings that you can make use of. If you open an exported .revealjs.htm -file in a text editor, you can at the top see something like this: /************************************************************************** * * * CHANGE THESE VARIABLES ACCORDING TO THEIR COMMENT IN ORDER TO DEFINE * * HOW YOUR PRESENTATION WILL LOOK AND BEHAVE. * * * **************************************************************************/ const zettlrRevealOptions = { // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: true, // Push each slide change to the browser history history: true, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autolaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'convex', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // The display mode that will be used to show slides display: 'block' }; These are the options to control the behaviour of the presentation. The options are pretty self-explanatory. Most options are set using true or false , or with a string, encapsulated in ' . Presentation Styling \u00b6 If all of the available themes don't appeal to you, you can style the presentation further by changing the same file. Simply use the search of your text editor to search for another comment block (by searching for a bunch of * -characters). It should say something like \"HERE YOU CAN OVERRIDE CERTAIN STYLES OF THE PRESENTATION\". There, simply use CSS-styles to override the default theme, for instance to make the background dark and the foreground light. To give you an example: if you put the following CSS-code inside the style -tag, you can switch colours on the white theme: body { background-color:rgb(40, 40, 40); color: rgb(200, 200, 220); } .reveal, .reveal h1, .reveal h2 { color: rgb(200, 200, 220); } You'll need some knowledge of CSS to finegrain the styling, but the appearance of the presentation itself should be satisfying on its own. Images \u00b6 One of the big drawbacks of such HTML presentations is that images cannot be contained in the resulting file. (To be correct, they can be included, but that would increase the file size by the size of all images multiplied by the factor 1.3.) So you need to decide where to put the images. There are basically three feasible methods. Create a dedicated directory for the images, e.g. img , inside the directory with your markdown file. Then link to all images using relative paths ( img/my-image.jpg ). When you export your file, make sure the presentation is in the same place relative to the image directory as your source file. Simply put all images inside the same directory as your presentation file. Then linking to them using their file name should suffice. Upload them to the web, for instance unto an image hosting service, and link their URLs. Only drawback: You would need to rely on a working internet connection at the place where you hold your presentation. A rule of thumb is: If Zettlr correctly displays your images, so will your presentation, as long as you make sure the presentation is in exactly the same directory as your source file relative to the images.","title":"Presentations"},{"location":"presentations/#presentations","text":"Since version 0.19.0 , Zettlr is able to export your Markdown files directly as presentation files using the reveal.js -framework. reveal.js is a lightweight solution for creating super compatible presentations using plain HTML and JavaScript . Therefore, these presentations can be shown on all computers that run a browser \u2014 nowadays this means: they run on every computer. For exporting Markdown files to reveal.js , you have to make sure Pandoc is installed on your computer. Head over to the section on exporting to see how to install pandoc. If you first want to be impressed by an actual export from Zettlr into reveal.js , please have a look at the demonstration presentation ! You can also read the source file while following the instructions on this page.","title":"Presentations"},{"location":"presentations/#pre-considerations","text":"Of course, a Markdown document that should be compiled into a presentation has a slightly different structure than other Markdown documents.","title":"Pre-considerations"},{"location":"presentations/#creating-slides","text":"You can create new slides in two ways. First, each heading level 1 will begin a new slide and also act as the title of the slide. But in case the heading level 1 is too big for your taste, or you simply don't want a title on that slide, you can also delimit slides by using Markdown dividers (either *** or --- ). Everything that follows the heading or the divider will end up being the content of the slides. You do not have to explicitly \"end\" the last slide with a divider.","title":"Creating slides"},{"location":"presentations/#using-markdown-elements","text":"Inside the slides, you can use all Markdown elements. They will be rendered as you would expect them. You can even use footnotes which will then be placed on their own, respective slide at the end!","title":"Using Markdown elements"},{"location":"presentations/#advanced-tools","text":"Of course, reveal.js presentations also have the same versatility as PowerPoint or Impress when it comes to controlling your presentation. For instance, you can use CSS-classes to tell the presentation that certain elements should be triggered before forwarding the presentation. These are called \"fragments\". Due to limitations in Pandoc's engine, you'll have to use plain HTML to achieve this. Consider, for instance, the HTML code from the demo presentation: <ul> <li class=\"fragment fade-in\">This item will fade in.</li> <li class=\"fragment highlight-blue\">This will be highlighted blue.</li> <li class=\"fragment highlight-red\">All available transitions are documented [here](https://github.com/hakimel/reveal.js/#fragments).</li> </ul> This will create a list with three items. All items are \"fragments\", which means that by pressing the shortcut for the next slide, the first will fade-in , as the class says. On the next press of the right arrow key, the second item will be highlighted in blue color. The third press of the right arrow key will highlight the last item red. And on the fourth press of the arrow key the next slide will be shown.","title":"Advanced Tools"},{"location":"presentations/#presentation-settings","text":"Of course, the presentation itself also has settings that you can make use of. If you open an exported .revealjs.htm -file in a text editor, you can at the top see something like this: /************************************************************************** * * * CHANGE THESE VARIABLES ACCORDING TO THEIR COMMENT IN ORDER TO DEFINE * * HOW YOUR PRESENTATION WILL LOOK AND BEHAVE. * * * **************************************************************************/ const zettlrRevealOptions = { // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: true, // Push each slide change to the browser history history: true, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autolaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'convex', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // The display mode that will be used to show slides display: 'block' }; These are the options to control the behaviour of the presentation. The options are pretty self-explanatory. Most options are set using true or false , or with a string, encapsulated in ' .","title":"Presentation settings"},{"location":"presentations/#presentation-styling","text":"If all of the available themes don't appeal to you, you can style the presentation further by changing the same file. Simply use the search of your text editor to search for another comment block (by searching for a bunch of * -characters). It should say something like \"HERE YOU CAN OVERRIDE CERTAIN STYLES OF THE PRESENTATION\". There, simply use CSS-styles to override the default theme, for instance to make the background dark and the foreground light. To give you an example: if you put the following CSS-code inside the style -tag, you can switch colours on the white theme: body { background-color:rgb(40, 40, 40); color: rgb(200, 200, 220); } .reveal, .reveal h1, .reveal h2 { color: rgb(200, 200, 220); } You'll need some knowledge of CSS to finegrain the styling, but the appearance of the presentation itself should be satisfying on its own.","title":"Presentation Styling"},{"location":"presentations/#images","text":"One of the big drawbacks of such HTML presentations is that images cannot be contained in the resulting file. (To be correct, they can be included, but that would increase the file size by the size of all images multiplied by the factor 1.3.) So you need to decide where to put the images. There are basically three feasible methods. Create a dedicated directory for the images, e.g. img , inside the directory with your markdown file. Then link to all images using relative paths ( img/my-image.jpg ). When you export your file, make sure the presentation is in the same place relative to the image directory as your source file. Simply put all images inside the same directory as your presentation file. Then linking to them using their file name should suffice. Upload them to the web, for instance unto an image hosting service, and link their URLs. Only drawback: You would need to rely on a working internet connection at the place where you hold your presentation. A rule of thumb is: If Zettlr correctly displays your images, so will your presentation, as long as you make sure the presentation is in exactly the same directory as your source file relative to the images.","title":"Images"},{"location":"projects/","text":"Projects \u00b6 Since version 0.18 , Zettlr supports projects. Projects are a way to simplify the concatenation and export of more than a single file. They allow you to split up one single project into several different files to work on. You can portion your work into several files and only in the end glue them together and export them as one single PDF file. Also, Zettlr projects allow you to better finegrain your PDF exports. With projects you can, for instance, command Zettlr to create a title page or a table of contents as well. Creating a project \u00b6 Zettlr Projects are basically just a bunch of additional features for directories. Therefore you can \"convert\" any directory into a project. Simply right-click the directory you want to make a project of and choose \"Create project\". Then the directory itself will be coloured red and a pencil-icon will appear to the left of its name, indicating that this directory has project features enabled. If you now right-click a directory, you have three additional context menu options at your disposal: \"Project Settings\", \"Build Project\" and \"Remove Project\". Working with Projects \u00b6 Choose \"Project Settings\" from the context menu of a project directory to open the settings. In general, these are just a copy of the PDF preferences you have globally available for quickly exporting single Markdown files. The two differences are that projects enable you to fine grain the generation of a PDF document, and that these PDF settings only apply for exporting this specific directory. Therefore you can leave your global PDF options intact and use different settings for your project. Now let us briefly explore the settings you got for projects. First the metadata tab: Project Title : This title will be used as the file name, the title (if you decide to create a title page) and the PDF title of your document. Default is the directory name. Project Author : This will be written into the PDF metadata field for authors. Project Keywords : These are keywords you may or may not use when exporting PDF documents. Generate Title Page : If this checkbox is selected, Zettlr will direct the LaTeX-engine to generate a title page. It'll use the project title and the current date as well as your author name and write them to the first page of your document. Generate Table of Contents : If this checkbox is selected, Zettlr will direct Pandoc to generate a Table of Contents on the second page (if you told Zettlr to generate a title page, else on the first page). Evaluate until Level \u2026 : With this dropdown list you can choose which headings will be part of your Table of Contents. The default \"2\" directs Pandoc to generate a table of contents using both first and second degree headers (i.e. ## and # -headers). A 4 would include 1st, 2nd, 3d and 4th grade headers (i.e. # , ## , ### , and #### ). All other headings will still be present in the file, but they will not appear in the Table of Contents. Currently, both the page and the font tabs are exactly the same for projects and for your general export options, so please refer to the settings page to get to know what they do. Building Projects \u00b6 To build a project, Zettlr will follow the steps described below to generate your final PDF, so please read them carefully to know what to expect once you decide to export your project! First, Zettlr will take the project directory and crunch the whole contents into a one-dimensional array. This means that all subfolders and all files in it will be flattened down into a simple list. What does that mean? Simply have a look at the preview pane. Internally, before exporting your files, Zettlr will arrange the files exactly as in the preview pane. Therefore, if you check out your preview list, you will know exactly which file will come after which. This is by design so you don't have a nightmarish discovery once you've handed in a paper and realise a full folder with three chapters has been left out. Please note that Zettlr will use all subdirectories! This is meant as a convenience for people writing huge projects that they can use as many subdirectories as they want. Therefore, the preview list will be exactly exported as is (all directories will simply be omitted). So please do not create a second level subdirectory, crunch your notes in it and then wonder how your notes got into the final manuscript. If you want to use additional files that shouldn't be exported, simply create two more folders inside your project directory. In one you can then put all your working files, while you can convert the other into the project that can be exported. After your files have been read, a small number of modifications to them is being made (all paths are normalised so that Pandoc and LaTeX may find all your images) before they are concatenated together. Then this huge file is written to disk into a temporary file. Next, Zettlr will read the settings you have given the project itself and basically follow the same process as generating single-document-PDFs: Start up the exporter, provide it with your settings, point it to the temporary file and let Pandoc and LaTeX do their work. Once your project has been exported, it is automatically opened with your default PDF previewer and it is saved into the project directory. Please note that especially the generation of a table of contents from huge projects may take an extraordinary amount of time. If you wish to generate a table of contents, LaTeX has to actually build the PDF twice \u2014 first to detect on which pages your headings end up after the conversion to PDF, and then a second time to actually include the table of contents. In a test I did, on a new Windows 10 computer the generation of a whole directory of excerpts that rendered to about 150 pages took approximately five minutes in which it seems as if it didn't work. So please be patient \u2014 as long as Pandoc or LaTeX don't complain about anything, they are still working. Pro-Tip : As you may know from the FAQ-section, Zettlr and Pandoc will not attempt to filter out TeX-commands you have written into your markdown documents. Remember this while working on your projects: You can add additional pages or do other funky stuff with your files that will actually be present in the final document! You can also create .tex -documents by providing the extension when creating new files. These .tex -documents support LaTeX syntax highlighting and will be included in the export of your project! Make sure they have a file name that places the file exactly where you need it. Removing Projects \u00b6 To remove a project, simply right click it and choose to remove the project. What will be removed is plain and simple the settings file that indicates that your directory should be treated as a project (as in the case of virtual directories, your project settings are stored in a small file called .ztr-project ). Therefore, if you remove a project, you actually only remove the settings of the project. If you re-create the project, the file will be present once again, but with the default settings. So remember, removing projects will finally delete your settings and you have to set them anew.","title":"Projects"},{"location":"projects/#projects","text":"Since version 0.18 , Zettlr supports projects. Projects are a way to simplify the concatenation and export of more than a single file. They allow you to split up one single project into several different files to work on. You can portion your work into several files and only in the end glue them together and export them as one single PDF file. Also, Zettlr projects allow you to better finegrain your PDF exports. With projects you can, for instance, command Zettlr to create a title page or a table of contents as well.","title":"Projects"},{"location":"projects/#creating-a-project","text":"Zettlr Projects are basically just a bunch of additional features for directories. Therefore you can \"convert\" any directory into a project. Simply right-click the directory you want to make a project of and choose \"Create project\". Then the directory itself will be coloured red and a pencil-icon will appear to the left of its name, indicating that this directory has project features enabled. If you now right-click a directory, you have three additional context menu options at your disposal: \"Project Settings\", \"Build Project\" and \"Remove Project\".","title":"Creating a project"},{"location":"projects/#working-with-projects","text":"Choose \"Project Settings\" from the context menu of a project directory to open the settings. In general, these are just a copy of the PDF preferences you have globally available for quickly exporting single Markdown files. The two differences are that projects enable you to fine grain the generation of a PDF document, and that these PDF settings only apply for exporting this specific directory. Therefore you can leave your global PDF options intact and use different settings for your project. Now let us briefly explore the settings you got for projects. First the metadata tab: Project Title : This title will be used as the file name, the title (if you decide to create a title page) and the PDF title of your document. Default is the directory name. Project Author : This will be written into the PDF metadata field for authors. Project Keywords : These are keywords you may or may not use when exporting PDF documents. Generate Title Page : If this checkbox is selected, Zettlr will direct the LaTeX-engine to generate a title page. It'll use the project title and the current date as well as your author name and write them to the first page of your document. Generate Table of Contents : If this checkbox is selected, Zettlr will direct Pandoc to generate a Table of Contents on the second page (if you told Zettlr to generate a title page, else on the first page). Evaluate until Level \u2026 : With this dropdown list you can choose which headings will be part of your Table of Contents. The default \"2\" directs Pandoc to generate a table of contents using both first and second degree headers (i.e. ## and # -headers). A 4 would include 1st, 2nd, 3d and 4th grade headers (i.e. # , ## , ### , and #### ). All other headings will still be present in the file, but they will not appear in the Table of Contents. Currently, both the page and the font tabs are exactly the same for projects and for your general export options, so please refer to the settings page to get to know what they do.","title":"Working with Projects"},{"location":"projects/#building-projects","text":"To build a project, Zettlr will follow the steps described below to generate your final PDF, so please read them carefully to know what to expect once you decide to export your project! First, Zettlr will take the project directory and crunch the whole contents into a one-dimensional array. This means that all subfolders and all files in it will be flattened down into a simple list. What does that mean? Simply have a look at the preview pane. Internally, before exporting your files, Zettlr will arrange the files exactly as in the preview pane. Therefore, if you check out your preview list, you will know exactly which file will come after which. This is by design so you don't have a nightmarish discovery once you've handed in a paper and realise a full folder with three chapters has been left out. Please note that Zettlr will use all subdirectories! This is meant as a convenience for people writing huge projects that they can use as many subdirectories as they want. Therefore, the preview list will be exactly exported as is (all directories will simply be omitted). So please do not create a second level subdirectory, crunch your notes in it and then wonder how your notes got into the final manuscript. If you want to use additional files that shouldn't be exported, simply create two more folders inside your project directory. In one you can then put all your working files, while you can convert the other into the project that can be exported. After your files have been read, a small number of modifications to them is being made (all paths are normalised so that Pandoc and LaTeX may find all your images) before they are concatenated together. Then this huge file is written to disk into a temporary file. Next, Zettlr will read the settings you have given the project itself and basically follow the same process as generating single-document-PDFs: Start up the exporter, provide it with your settings, point it to the temporary file and let Pandoc and LaTeX do their work. Once your project has been exported, it is automatically opened with your default PDF previewer and it is saved into the project directory. Please note that especially the generation of a table of contents from huge projects may take an extraordinary amount of time. If you wish to generate a table of contents, LaTeX has to actually build the PDF twice \u2014 first to detect on which pages your headings end up after the conversion to PDF, and then a second time to actually include the table of contents. In a test I did, on a new Windows 10 computer the generation of a whole directory of excerpts that rendered to about 150 pages took approximately five minutes in which it seems as if it didn't work. So please be patient \u2014 as long as Pandoc or LaTeX don't complain about anything, they are still working. Pro-Tip : As you may know from the FAQ-section, Zettlr and Pandoc will not attempt to filter out TeX-commands you have written into your markdown documents. Remember this while working on your projects: You can add additional pages or do other funky stuff with your files that will actually be present in the final document! You can also create .tex -documents by providing the extension when creating new files. These .tex -documents support LaTeX syntax highlighting and will be included in the export of your project! Make sure they have a file name that places the file exactly where you need it.","title":"Building Projects"},{"location":"projects/#removing-projects","text":"To remove a project, simply right click it and choose to remove the project. What will be removed is plain and simple the settings file that indicates that your directory should be treated as a project (as in the case of virtual directories, your project settings are stored in a small file called .ztr-project ). Therefore, if you remove a project, you actually only remove the settings of the project. If you re-create the project, the file will be present once again, but with the default settings. So remember, removing projects will finally delete your settings and you have to set them anew.","title":"Removing Projects"},{"location":"settings/","text":"Settings \u00b6 Zettlr offers you a plethora of options to customise your experience with the app. It comes with three different settings-dialogs that will be explained in detail here, so you know which option does what. General Preferences \u00b6 You can display the general preference dialog using either the shortcut Cmd/Ctrl+, , the toolbar button (the cog) or the respective menu item. The dialog will then show up and present to you all configuration options you may customise. They are ordered in six tabs that you can see at the top of the dialog. General: These options affect Zettlr as a whole. Editor: These settings concern only the editor itself. Export: Control how your files are exported in this tab. Zettelkasten: Adapt Zettlr to match your Zettelkasten system. Display: Control how the editor displays certain elements, such as images or links. Advanced: Options for experienced users. General \u00b6 In the general tab you find options that you might want to adjust if you begin using Zettlr to fit it to your needs. The application language is pretty self-explanatory. The \"Night Mode\" and \"Snippets\"-checkboxes control the display. The \"Night Mode\" is simply the dark theme Zettlr is capable of (and which you might want to control using the shortcut Cmd/Ctrl+Alt+L instead). Check the \"Snippets\"-checkbox to display text snippets in the preview pane (although you can control this behaviour as well using its respective shortcut Cmd/Ctrl+Alt+S ). The sidebar mode controls how the sidebar is displayed to you. You have two options: Thin: In thin mode, the sidebar only displays either the list of files or the directory list. You can switch between both using the shortcuts Cmd/Ctrl+1 and Cmd/Ctrl+2 . Expanded: The expanded mode displays both the directory list and the file list side by side. In this mode, you have both lists always present. If you want to hide the sidebar completely, please use the distraction-free mode ( Cmd/Ctrl+J ). The sorting order determines how Zettlr will sort your files internally. The natural order is recommended; ASCII ignores certain natural language implications. Editor \u00b6 On the editor tab, you can enable or disable dictionaries. The list to the left contains all deselected dictionaries. You can filter them using the search bar at the top. Click a dictionary to enable it. Enabled dictionaries are listed to the right. Simply click a dictionary on the right to deselect it. If you want to disable spell checking completely, simply deselect all dictionaries. Muting non-focused lines in the distraction free mode means that only the line in which your cursor currently is will be displayed in full brightness, while all other lines will be dimmed. This helps you focus more on what you are currently doing. Automatically closing certain character pairs means that whenever you type one of the character in the editor, for instance a backtick, Zettlr will automatically add the second backtick (or brackets). Export \u00b6 The export tab allows you to tweak all preferences concerning how your files are exported. To the left you have options concerning the Zettelkasten functionality. Selecting \"Remove ZKN IDs from files\" makes Zettlr remove all IDs that it finds in your files prior to export. \"Remove tags from files\" does the same but with tags. We recommend leaving the option to remove Zettelkasten IDs from your files off unless you know what you are doing. Some websites produce links that contain 14 consecutive digits, and Zettlr will only stroll through the files removing everything your ID regular expression will detect, so it may break links! Below these options you can choose what to do with internal links (by default they are encapsulated in [[ and ]] ). The first option completely removes them, the second only removes the link formatting, while the last option leaves them alone. On the right side you have more general options for exporting. You can choose to export your files to the temporary directory. This is recommended, as it allows you to leave the files alone, because they will be deleted automatically. The second option stores the rendered files in the current directory, overwriting existing files without asking. Use this option if you need the files be present in the attachment sidebar. The CSL JSON database field can be used to open a literature database. Zettlr will read in the file and enable citation rendering in your files. The CSL Style lets you overwrite the default citation style (APA). You can use any file present in the Zotero style repository . The citation options can be overwritten on a per-project basis in the corresponding project's settings. Zettelkasten \u00b6 In this tab you can customise the way Zettlr works with your existing Zettelkasten system. In most cases you won't need to touch these options, but it may be you want to use a custom system. You have four options that are important for Zettelk\u00e4sten: The ID regular expression, the link start and ending, and the generator pattern. The ID RegEx \u00b6 Zettlr uses regular expressions internally to filter out the ID of a file. It looks for that pattern, and if it finds a string that matches this pattern, it assumes that as the ID of the file. Please note that the first match in a file will be assumed the ID, never the last! This means: If you choose to use only four digits as your ID, the regular expression would also match years inside your file. As Zettlr simply takes the first ID, make sure that the very first thing in your file is the ID of that file. The default regular expression (which you can restore by pressing the reset button next to the text field) is (\\d{14}) . This means Zettlr will look for 14 consecutive digits \u2014 exactly the number of digits that you get when you concatenate a year, a month, a day, an hour, a minute and a second; like this: 20181012143724. It is extremely unlikely that a file contains a second string that includes fourteen (!) digits, therefore it's a great method to use as an ID. Another great thing is that the ID is unique to the second. So each second you can create a new, fully unique ID. The braces around the \\d{14} create a so-called \"capturing group\". A capturing group's purpose is that the regular expression not only matches a certain string, but also extracts a part of it \u2014 in this case the full match. This way you can use almost any structure of IDs you want. Note that you can omit the capturing group's braces. Zettlr will encapsulate your RegEx internally, if there is no capturing group. The Internal Links \u00b6 The internal links are explained pretty quick: Simply choose how you'd like to write internal links. The default are Wiki-Style-Links: [[your-link]]. You could also use curly brackets: {{your-link}}. Or you could use exclamation marks: !your-link!. Whatever suits you! The internal links are used for two things: First, if they either contain an existing file name or an existing ID, clicking them will directly open the respective file (identified either by its name without the extension, or by its ID). Second, if they don't contain any of that, they won't open any file, but they will work as a search function, so ALT -clicking them will start a search \u2014 this is great for saving searches you do often! Note that files will not assume any link as an ID. If a file finds an ID that is surrounded by the internal link formatting, it will not use this ID. The ID Generator \u00b6 The last field in the Zettelkasten tab in the preferences window concerns the way the IDs are generated. It is a simple string that may contain variables that are replaced when an ID is generated. Currently, you have the current year, month, day, hour, minute, and second available. The default ID generator pattern is: %Y%M%D%h%m%s , which means it will replace %Y with the current year (4 digits), %M with the current month (with leading zeroes), and so forth. You could also include some static part in your IDs, if you wish. So with the ID pattern set to %Y-%M-%D_%h:%m:%s Zettlr would generate an ID like this: 2018-10-12_12:03:56 . You can also reuse the variables in your pattern, e.g. to use only seconds as your ID. You could use something like this: %s%s%s and would get 565656 . Always remember to adapt your regular expression so that it matches what the ID generator spits out. To successfully identify the ID with the pattern, %Y-%M-%D_%h:%m:%s , Zettlr would need the following regular expression: (\\d{4}-\\d{2}-\\d{2}_\\d{2}:\\d{2}:\\d{2}) . You can test both the generation of IDs and the detection of them by clicking the Test-button below the text fields. Zettlr will then generate an ID and immediately tries to match it using your custom regular expression. Whether or not Zettlr was able to detect the ID will be indicated. Display \u00b6 This tab controls how the editor displays certain elements. Zettlr uses a semi-preview approach to Markdown and only renders some elements. On this tab you can control which elements will be rendered. The iFrame-setting controls whether or not to render iFrames (for instance, YouTube-videos are embedded iFrames). Additionally you can constrain the size of images, which is especially beneficial if you use a lot of portrait oriented images. The horizontal slider controls the maximum amount of width images are allowed to occupy. Setting this to 50 %, for instance, will keep images at half the width of the text body. 100 % disables this (images will never be wider than 100 % of the text body width). The vertical slider controls the maximum height of the images relative to the window size. 50 percent would mean that images will never be higher than half of the window's total size. 100 percent disables this behaviour. Unlike the width, images may very well exceed 100 percent of the viewport if they are large and thin. Advanced \u00b6 The advanced tab contains options rarely used. The pandoc- and xelatex-text fields are used in case Zettlr is unable to locate any of these two programs. As you know, Zettlr uses both to export your files. In rare cases it may be that Zettlr is unable to find them, although you installed them properly. If that happens, simply enter the full, absolute path to both programs in the textfields to help Zettlr find them. The debug option is used to control whether or not you are able to \"reload\" the graphical user interface (GUI) by pressing F5 and display the Chrome developer tools to inspect what the app is doing. Naturally, you would want to do this as a developer. You can also help Zettlr by subscribing to beta releases. When you tick this option, Zettlr will notify you about new beta releases as well. You can then decide whether to use the beta version, or not. The text area to the right controls what files will be displayed in the attachment sidebar. It is simply a comma-separated list of all file extensions you would like to have at your disposal. The initial list should contain most extensions that are you might be using. PDF Preferences \u00b6 We've moved the PDF Preferences to another dialog because there are many you can use. These options control how the LaTeX-engine will render your files on PDF-exporting. They do not have any effect on all other export formats. You can bring up the dialog using either its shortcut Cmd/Ctrl+Alt+, or using the respective menu entry. The PDF options are also divided by tabs. Currently, there are three: Metadata: This controls the metadata field of PDF files. Page: Adjust the layout of pages using this tab. Font: All options regarding the font used in your exports are collected in this tab. Metadata \u00b6 This data can be shown in your PDF readers using a dedicated menu item. Normally they are hidden from view, but in some circumstances they are used. The only thing that should be of concern really is the author field, which is prefilled by the information \"Generated by Zettlr\". You can change this to your own name (or the name of your company). Keywords and the \"topic\" field are rarely used. Page \u00b6 In this tab you can control the layout of the page. These options work just as you would expect them from the similar dialogs that are used in LibreOffice or Microsoft Office. You can change the size of the paper, adjust the margins around the content and tell Zettlr whether or not you want to use page numbers (and which numbering system you want to use). Font \u00b6 Here you can control how the font is displayed. The main font is the font used for all text. The LaTeX-engine will fetch this directly, so the name you type here must match exactly a font installed on your computer. If the LaTeX-engine is unable to locate the font, it will spit out an error. To know whether you've encountered such an error or another error that does not relate to the font, simply search for the font name you typed here in the error message. If your font name appears, there is a high chance that the font is called differently. Then please open your operating system's font preferences and check the name. The font-size should be rather obvious. The line height specifies the spacing between lines (this only applies to paragraphs). For instance a line height of 150 percent would create a space of half a line between the lines (i.e. each line is followed by a space 50 percent of a normal line height before the next line begins). Manage Tags \u00b6 The tags dialog does not have a shortcut associated, so you'll need to call it using the respective menu item. Here you can assign colours and descriptions to tags. To add a new tag-colour-relationship, simply press the + -button at the bottom of the dialog. In the first field, enter your tag without the preceding hashtag symbol (e.g. if you wanted to assign a colour to the hashtag #todo , simply enter todo ). Next, choose a colour to be assigned to that tag. If you click the second bar after the tag name field, a color picker should appear that lets you choose a colour. In the third field, you can enter a short description for that tag. This description will be shown if you hover over the tag symbols in the preview pane. If you want to remove a tag-colour-association, simply click the - -button at the end of such a tagline (pun intended).","title":"Settings"},{"location":"settings/#settings","text":"Zettlr offers you a plethora of options to customise your experience with the app. It comes with three different settings-dialogs that will be explained in detail here, so you know which option does what.","title":"Settings"},{"location":"settings/#general-preferences","text":"You can display the general preference dialog using either the shortcut Cmd/Ctrl+, , the toolbar button (the cog) or the respective menu item. The dialog will then show up and present to you all configuration options you may customise. They are ordered in six tabs that you can see at the top of the dialog. General: These options affect Zettlr as a whole. Editor: These settings concern only the editor itself. Export: Control how your files are exported in this tab. Zettelkasten: Adapt Zettlr to match your Zettelkasten system. Display: Control how the editor displays certain elements, such as images or links. Advanced: Options for experienced users.","title":"General Preferences"},{"location":"settings/#general","text":"In the general tab you find options that you might want to adjust if you begin using Zettlr to fit it to your needs. The application language is pretty self-explanatory. The \"Night Mode\" and \"Snippets\"-checkboxes control the display. The \"Night Mode\" is simply the dark theme Zettlr is capable of (and which you might want to control using the shortcut Cmd/Ctrl+Alt+L instead). Check the \"Snippets\"-checkbox to display text snippets in the preview pane (although you can control this behaviour as well using its respective shortcut Cmd/Ctrl+Alt+S ). The sidebar mode controls how the sidebar is displayed to you. You have two options: Thin: In thin mode, the sidebar only displays either the list of files or the directory list. You can switch between both using the shortcuts Cmd/Ctrl+1 and Cmd/Ctrl+2 . Expanded: The expanded mode displays both the directory list and the file list side by side. In this mode, you have both lists always present. If you want to hide the sidebar completely, please use the distraction-free mode ( Cmd/Ctrl+J ). The sorting order determines how Zettlr will sort your files internally. The natural order is recommended; ASCII ignores certain natural language implications.","title":"General"},{"location":"settings/#editor","text":"On the editor tab, you can enable or disable dictionaries. The list to the left contains all deselected dictionaries. You can filter them using the search bar at the top. Click a dictionary to enable it. Enabled dictionaries are listed to the right. Simply click a dictionary on the right to deselect it. If you want to disable spell checking completely, simply deselect all dictionaries. Muting non-focused lines in the distraction free mode means that only the line in which your cursor currently is will be displayed in full brightness, while all other lines will be dimmed. This helps you focus more on what you are currently doing. Automatically closing certain character pairs means that whenever you type one of the character in the editor, for instance a backtick, Zettlr will automatically add the second backtick (or brackets).","title":"Editor"},{"location":"settings/#export","text":"The export tab allows you to tweak all preferences concerning how your files are exported. To the left you have options concerning the Zettelkasten functionality. Selecting \"Remove ZKN IDs from files\" makes Zettlr remove all IDs that it finds in your files prior to export. \"Remove tags from files\" does the same but with tags. We recommend leaving the option to remove Zettelkasten IDs from your files off unless you know what you are doing. Some websites produce links that contain 14 consecutive digits, and Zettlr will only stroll through the files removing everything your ID regular expression will detect, so it may break links! Below these options you can choose what to do with internal links (by default they are encapsulated in [[ and ]] ). The first option completely removes them, the second only removes the link formatting, while the last option leaves them alone. On the right side you have more general options for exporting. You can choose to export your files to the temporary directory. This is recommended, as it allows you to leave the files alone, because they will be deleted automatically. The second option stores the rendered files in the current directory, overwriting existing files without asking. Use this option if you need the files be present in the attachment sidebar. The CSL JSON database field can be used to open a literature database. Zettlr will read in the file and enable citation rendering in your files. The CSL Style lets you overwrite the default citation style (APA). You can use any file present in the Zotero style repository . The citation options can be overwritten on a per-project basis in the corresponding project's settings.","title":"Export"},{"location":"settings/#zettelkasten","text":"In this tab you can customise the way Zettlr works with your existing Zettelkasten system. In most cases you won't need to touch these options, but it may be you want to use a custom system. You have four options that are important for Zettelk\u00e4sten: The ID regular expression, the link start and ending, and the generator pattern.","title":"Zettelkasten"},{"location":"settings/#the-id-regex","text":"Zettlr uses regular expressions internally to filter out the ID of a file. It looks for that pattern, and if it finds a string that matches this pattern, it assumes that as the ID of the file. Please note that the first match in a file will be assumed the ID, never the last! This means: If you choose to use only four digits as your ID, the regular expression would also match years inside your file. As Zettlr simply takes the first ID, make sure that the very first thing in your file is the ID of that file. The default regular expression (which you can restore by pressing the reset button next to the text field) is (\\d{14}) . This means Zettlr will look for 14 consecutive digits \u2014 exactly the number of digits that you get when you concatenate a year, a month, a day, an hour, a minute and a second; like this: 20181012143724. It is extremely unlikely that a file contains a second string that includes fourteen (!) digits, therefore it's a great method to use as an ID. Another great thing is that the ID is unique to the second. So each second you can create a new, fully unique ID. The braces around the \\d{14} create a so-called \"capturing group\". A capturing group's purpose is that the regular expression not only matches a certain string, but also extracts a part of it \u2014 in this case the full match. This way you can use almost any structure of IDs you want. Note that you can omit the capturing group's braces. Zettlr will encapsulate your RegEx internally, if there is no capturing group.","title":"The ID RegEx"},{"location":"settings/#the-internal-links","text":"The internal links are explained pretty quick: Simply choose how you'd like to write internal links. The default are Wiki-Style-Links: [[your-link]]. You could also use curly brackets: {{your-link}}. Or you could use exclamation marks: !your-link!. Whatever suits you! The internal links are used for two things: First, if they either contain an existing file name or an existing ID, clicking them will directly open the respective file (identified either by its name without the extension, or by its ID). Second, if they don't contain any of that, they won't open any file, but they will work as a search function, so ALT -clicking them will start a search \u2014 this is great for saving searches you do often! Note that files will not assume any link as an ID. If a file finds an ID that is surrounded by the internal link formatting, it will not use this ID.","title":"The Internal Links"},{"location":"settings/#the-id-generator","text":"The last field in the Zettelkasten tab in the preferences window concerns the way the IDs are generated. It is a simple string that may contain variables that are replaced when an ID is generated. Currently, you have the current year, month, day, hour, minute, and second available. The default ID generator pattern is: %Y%M%D%h%m%s , which means it will replace %Y with the current year (4 digits), %M with the current month (with leading zeroes), and so forth. You could also include some static part in your IDs, if you wish. So with the ID pattern set to %Y-%M-%D_%h:%m:%s Zettlr would generate an ID like this: 2018-10-12_12:03:56 . You can also reuse the variables in your pattern, e.g. to use only seconds as your ID. You could use something like this: %s%s%s and would get 565656 . Always remember to adapt your regular expression so that it matches what the ID generator spits out. To successfully identify the ID with the pattern, %Y-%M-%D_%h:%m:%s , Zettlr would need the following regular expression: (\\d{4}-\\d{2}-\\d{2}_\\d{2}:\\d{2}:\\d{2}) . You can test both the generation of IDs and the detection of them by clicking the Test-button below the text fields. Zettlr will then generate an ID and immediately tries to match it using your custom regular expression. Whether or not Zettlr was able to detect the ID will be indicated.","title":"The ID Generator"},{"location":"settings/#display","text":"This tab controls how the editor displays certain elements. Zettlr uses a semi-preview approach to Markdown and only renders some elements. On this tab you can control which elements will be rendered. The iFrame-setting controls whether or not to render iFrames (for instance, YouTube-videos are embedded iFrames). Additionally you can constrain the size of images, which is especially beneficial if you use a lot of portrait oriented images. The horizontal slider controls the maximum amount of width images are allowed to occupy. Setting this to 50 %, for instance, will keep images at half the width of the text body. 100 % disables this (images will never be wider than 100 % of the text body width). The vertical slider controls the maximum height of the images relative to the window size. 50 percent would mean that images will never be higher than half of the window's total size. 100 percent disables this behaviour. Unlike the width, images may very well exceed 100 percent of the viewport if they are large and thin.","title":"Display"},{"location":"settings/#advanced","text":"The advanced tab contains options rarely used. The pandoc- and xelatex-text fields are used in case Zettlr is unable to locate any of these two programs. As you know, Zettlr uses both to export your files. In rare cases it may be that Zettlr is unable to find them, although you installed them properly. If that happens, simply enter the full, absolute path to both programs in the textfields to help Zettlr find them. The debug option is used to control whether or not you are able to \"reload\" the graphical user interface (GUI) by pressing F5 and display the Chrome developer tools to inspect what the app is doing. Naturally, you would want to do this as a developer. You can also help Zettlr by subscribing to beta releases. When you tick this option, Zettlr will notify you about new beta releases as well. You can then decide whether to use the beta version, or not. The text area to the right controls what files will be displayed in the attachment sidebar. It is simply a comma-separated list of all file extensions you would like to have at your disposal. The initial list should contain most extensions that are you might be using.","title":"Advanced"},{"location":"settings/#pdf-preferences","text":"We've moved the PDF Preferences to another dialog because there are many you can use. These options control how the LaTeX-engine will render your files on PDF-exporting. They do not have any effect on all other export formats. You can bring up the dialog using either its shortcut Cmd/Ctrl+Alt+, or using the respective menu entry. The PDF options are also divided by tabs. Currently, there are three: Metadata: This controls the metadata field of PDF files. Page: Adjust the layout of pages using this tab. Font: All options regarding the font used in your exports are collected in this tab.","title":"PDF Preferences"},{"location":"settings/#metadata","text":"This data can be shown in your PDF readers using a dedicated menu item. Normally they are hidden from view, but in some circumstances they are used. The only thing that should be of concern really is the author field, which is prefilled by the information \"Generated by Zettlr\". You can change this to your own name (or the name of your company). Keywords and the \"topic\" field are rarely used.","title":"Metadata"},{"location":"settings/#page","text":"In this tab you can control the layout of the page. These options work just as you would expect them from the similar dialogs that are used in LibreOffice or Microsoft Office. You can change the size of the paper, adjust the margins around the content and tell Zettlr whether or not you want to use page numbers (and which numbering system you want to use).","title":"Page"},{"location":"settings/#font","text":"Here you can control how the font is displayed. The main font is the font used for all text. The LaTeX-engine will fetch this directly, so the name you type here must match exactly a font installed on your computer. If the LaTeX-engine is unable to locate the font, it will spit out an error. To know whether you've encountered such an error or another error that does not relate to the font, simply search for the font name you typed here in the error message. If your font name appears, there is a high chance that the font is called differently. Then please open your operating system's font preferences and check the name. The font-size should be rather obvious. The line height specifies the spacing between lines (this only applies to paragraphs). For instance a line height of 150 percent would create a space of half a line between the lines (i.e. each line is followed by a space 50 percent of a normal line height before the next line begins).","title":"Font"},{"location":"settings/#manage-tags","text":"The tags dialog does not have a shortcut associated, so you'll need to call it using the respective menu item. Here you can assign colours and descriptions to tags. To add a new tag-colour-relationship, simply press the + -button at the bottom of the dialog. In the first field, enter your tag without the preceding hashtag symbol (e.g. if you wanted to assign a colour to the hashtag #todo , simply enter todo ). Next, choose a colour to be assigned to that tag. If you click the second bar after the tag name field, a color picker should appear that lets you choose a colour. In the third field, you can enter a short description for that tag. This description will be shown if you hover over the tag symbols in the preview pane. If you want to remove a tag-colour-association, simply click the - -button at the end of such a tagline (pun intended).","title":"Manage Tags"},{"location":"shortcuts/","text":"Shortcuts \u00b6 This page contains a list of all shortcuts available throughout the app. For remembering them easier, here are some thoughts we've put into assigning the shortcuts. In general, we try to follow these rules, but not all shortcuts follow them. Common shortcuts : Some shortcuts are so common that they don't fit into our shortcut system, but everybody will recognise them. One example is the preferences shortcut ( Cmd/Ctrl+, ), another the shortcut to finish editing a footnote ( Shift+Enter ). We try to use as many of these shortcuts as possible to reduce friction. High-priority shortcuts : You will be using these shortcuts a lot while using the app. These are generally Cmd/Ctrl and one single letter. While naming the shortcuts we try to stick to the English names of the command that it triggers ( N ew, R emove, F ind, etc). Sometimes this is not possible (for instance the Distraction Free mode is triggered via Cmd/Ctrl+J , because Cmd/Ctrl+D is already taken by the editor). Alternative actions : We take the semantic meaning of the Alt -key serious. Therefore, take a high-priority shortcut, add an Alt to it and you normally tend to trigger an alternative action on the same target. Notable exceptions to this are the developer panel (opens with Cmd/Ctrl+Alt+I , while Cmd/Ctrl+I makes text Italic). This is true for all actions that you can trigger using mouse clicks. All alternative mouse actions are triggered with an Alt+Click . In case Alt-Click s don't yield the expected results, Ctrl+Click s also work . Alternative targets : In case you want to perform the same action , but on a different target, try using a Shift -key. Throughout most of the app, Shift -commands will change the target from the currently selected file to the currently selected directory. The search also utilises this ( Cmd/Ctrl+F searches the file, while Cmd/Ctrl+Shift+F searches the whole directory). App-wide shortcuts \u00b6 Cmd/Ctrl+, : Open Preferences Cmd/Ctrl+Alt+, : Open PDF export Preferences Cmd/Ctrl+Q : Exit the app Cmd/Ctrl+N : Create a new file inside the currently selected directory. If none is selected, the command is disabled. Cmd/Ctrl+Shift+N : Create a new directory inside the currently selected directory. If none is selected, the command is disabled. Cmd/Ctrl+O : Display the dialog to open another directory. Cmd/Ctrl+S : Save the file. Zettlr automatically saves your files, but some people tend to feel better having the option to manually save. Cmd/Ctrl+E : Open the export popup for exporting the current file. If none is selected, the command is disabled. Cmd/Ctrl+R : Rename the opened file. If none is selected, the command is disabled. Cmd/Ctrl+Shift+R : Rename the current directory. If none is selected, the command is disabled. Cmd/Ctrl+Delete : Delete the current file. If none is selected, the command is disabled. Cmd/Ctrl+Shift+Delete : Delete the current directory. If none is selected, the command is disabled. Cmd/Ctrl+Shift+F : Gives focus to the global search field. Cmd/Ctrl+Alt+L : Switches the theme between light and dark mode. Cmd/Ctrl+Alt+S : Toggles display of the text snippets. Cmd/Ctrl+Shift+1 : Toggles the sidebar mode to either view the file list or the tree view. Disabled in extended sidebar mode. Cmd/Ctrl+? : Toggles display of the attachment sidebar. Cmd/Ctrl+[0-9] : Open recent document at position 0 to 9 in the recent documents list (File->Recent Documents). Cmd+Ctrl+F (macOS) F11 (windows/Linux): Toggle fullscreen Cmd/Ctrl+W : Close the application window. On Windows and Linux this will also exit the app. Cmd/Ctrl+M : Minimize the application window. F1 : Open this documentation. This will open the link in your default browser. If the debug mode is enabled F5 : Reload the graphical user interface. Cmd+Alt+I (macOs) Ctrl+Shift+I (Windows/Linux): Open the Chrome developer tools. Textfield-related app-wide shortcuts \u00b6 Cmd/Ctrl+Z : Undo Cmd/Ctrl+Shift+Z : Redo Cmd/Ctrl+X : Cut Cmd/Ctrl+C : Copy Cmd/Ctrl+V : Paste Cmd/Ctrl+A : Select all text Editor-related shortcuts \u00b6 Cmd/Ctrl+Alt+C : Copy as HTML. If there is a selection, it will be converted to HTML and not copied as plain text. This allows you to paste it, e.g., into word processors. Cmd/Ctrl+Shift+C : (Un-)Comment the given text selection (or add a new HTML comment at cursor position). Cmd/Ctrl+X : Cut. If the editor has focus, it will cut the selection. If nothing is selected, this will cut the whole line , in which the cursor is. Cmd/Ctrl+V : Paste. If the editor has focus, and you have just cut a whole line, it will paste this whole line above the line, in which the cursor currently is. Formatting will be preserved if the clipboard contains formatted text. Cmd/Ctrl+Shift+V : The same as the above, except it will not try to preserve the formatting of the pasted text. Cmd/Ctrl+B : Make the selection bold or insert new bold formatting characters. Cmd/Ctrl+I : Make the selection italic or insert new italics formatting characters. Cmd/Ctrl+K : Insert a new link template or convert the selected text into the caption of a new link. If the clipboard contains a recognisable link, also fill in the braces for the target. Cmd/Ctrl+F : Opens the search popup inside the editor that has currently focus (either the main editor or a Quicklook window). Ctrl+Alt+F (Windows/Linux) Cmd+Alt+R (macOS): Insert a new footnote at the current cursor position. Cmd/Ctrl+L : Generate a new ID using the generator pattern from the settings dialog and insert it at the current cursor position. Cmd/Ctrl+0 : Re-set the font-size of the editor to standard. Cmd+Plus (macOS) Ctrl+Shift+Plus (Windows/Linux): Increase the editor font size. Cmd/Ctrl+Minus : Decrease the editor font size. Tab : Indent a list. Shift-Tab : Outdent a list. Shift-Enter : When editing a footnote, saves the reference text. Otherwise it will prevent auto-insertion of a new list item. Ctrl-Enter : Insert a line below the one your cursor is currently in, and place the cursor at the beginning of it. Ctrl-Shift-Enter : Insert a line above the one where your cursor is currently, and place the cursor at the beginning of it. Preview-related shortcuts \u00b6 Arrow Up : Open the previous file. Arrow Down : Open the next file. Cmd/Ctrl+Arrow Up : Jump to the top of the list. Cmd/Ctrl+Arrow Down : Jump to the bottom of the list. Popup-related shortcuts \u00b6 ESC : If any text field inside the popup has focus, pressing Escape will close the popup. In the search popup of the main editor Return : While the search textfield is focused, it will select the next occurrence of your search term. While the replace textfield is focused, it will replace the next occurrence of your search term with the replacement text and automatically search for the next occurrence. Alt+Return : While the replace textfield is focused, this will replace all occurrences of your search term with the replacement text.","title":"Shortcuts"},{"location":"shortcuts/#shortcuts","text":"This page contains a list of all shortcuts available throughout the app. For remembering them easier, here are some thoughts we've put into assigning the shortcuts. In general, we try to follow these rules, but not all shortcuts follow them. Common shortcuts : Some shortcuts are so common that they don't fit into our shortcut system, but everybody will recognise them. One example is the preferences shortcut ( Cmd/Ctrl+, ), another the shortcut to finish editing a footnote ( Shift+Enter ). We try to use as many of these shortcuts as possible to reduce friction. High-priority shortcuts : You will be using these shortcuts a lot while using the app. These are generally Cmd/Ctrl and one single letter. While naming the shortcuts we try to stick to the English names of the command that it triggers ( N ew, R emove, F ind, etc). Sometimes this is not possible (for instance the Distraction Free mode is triggered via Cmd/Ctrl+J , because Cmd/Ctrl+D is already taken by the editor). Alternative actions : We take the semantic meaning of the Alt -key serious. Therefore, take a high-priority shortcut, add an Alt to it and you normally tend to trigger an alternative action on the same target. Notable exceptions to this are the developer panel (opens with Cmd/Ctrl+Alt+I , while Cmd/Ctrl+I makes text Italic). This is true for all actions that you can trigger using mouse clicks. All alternative mouse actions are triggered with an Alt+Click . In case Alt-Click s don't yield the expected results, Ctrl+Click s also work . Alternative targets : In case you want to perform the same action , but on a different target, try using a Shift -key. Throughout most of the app, Shift -commands will change the target from the currently selected file to the currently selected directory. The search also utilises this ( Cmd/Ctrl+F searches the file, while Cmd/Ctrl+Shift+F searches the whole directory).","title":"Shortcuts"},{"location":"shortcuts/#app-wide-shortcuts","text":"Cmd/Ctrl+, : Open Preferences Cmd/Ctrl+Alt+, : Open PDF export Preferences Cmd/Ctrl+Q : Exit the app Cmd/Ctrl+N : Create a new file inside the currently selected directory. If none is selected, the command is disabled. Cmd/Ctrl+Shift+N : Create a new directory inside the currently selected directory. If none is selected, the command is disabled. Cmd/Ctrl+O : Display the dialog to open another directory. Cmd/Ctrl+S : Save the file. Zettlr automatically saves your files, but some people tend to feel better having the option to manually save. Cmd/Ctrl+E : Open the export popup for exporting the current file. If none is selected, the command is disabled. Cmd/Ctrl+R : Rename the opened file. If none is selected, the command is disabled. Cmd/Ctrl+Shift+R : Rename the current directory. If none is selected, the command is disabled. Cmd/Ctrl+Delete : Delete the current file. If none is selected, the command is disabled. Cmd/Ctrl+Shift+Delete : Delete the current directory. If none is selected, the command is disabled. Cmd/Ctrl+Shift+F : Gives focus to the global search field. Cmd/Ctrl+Alt+L : Switches the theme between light and dark mode. Cmd/Ctrl+Alt+S : Toggles display of the text snippets. Cmd/Ctrl+Shift+1 : Toggles the sidebar mode to either view the file list or the tree view. Disabled in extended sidebar mode. Cmd/Ctrl+? : Toggles display of the attachment sidebar. Cmd/Ctrl+[0-9] : Open recent document at position 0 to 9 in the recent documents list (File->Recent Documents). Cmd+Ctrl+F (macOS) F11 (windows/Linux): Toggle fullscreen Cmd/Ctrl+W : Close the application window. On Windows and Linux this will also exit the app. Cmd/Ctrl+M : Minimize the application window. F1 : Open this documentation. This will open the link in your default browser. If the debug mode is enabled F5 : Reload the graphical user interface. Cmd+Alt+I (macOs) Ctrl+Shift+I (Windows/Linux): Open the Chrome developer tools.","title":"App-wide shortcuts"},{"location":"shortcuts/#textfield-related-app-wide-shortcuts","text":"Cmd/Ctrl+Z : Undo Cmd/Ctrl+Shift+Z : Redo Cmd/Ctrl+X : Cut Cmd/Ctrl+C : Copy Cmd/Ctrl+V : Paste Cmd/Ctrl+A : Select all text","title":"Textfield-related app-wide shortcuts"},{"location":"shortcuts/#editor-related-shortcuts","text":"Cmd/Ctrl+Alt+C : Copy as HTML. If there is a selection, it will be converted to HTML and not copied as plain text. This allows you to paste it, e.g., into word processors. Cmd/Ctrl+Shift+C : (Un-)Comment the given text selection (or add a new HTML comment at cursor position). Cmd/Ctrl+X : Cut. If the editor has focus, it will cut the selection. If nothing is selected, this will cut the whole line , in which the cursor is. Cmd/Ctrl+V : Paste. If the editor has focus, and you have just cut a whole line, it will paste this whole line above the line, in which the cursor currently is. Formatting will be preserved if the clipboard contains formatted text. Cmd/Ctrl+Shift+V : The same as the above, except it will not try to preserve the formatting of the pasted text. Cmd/Ctrl+B : Make the selection bold or insert new bold formatting characters. Cmd/Ctrl+I : Make the selection italic or insert new italics formatting characters. Cmd/Ctrl+K : Insert a new link template or convert the selected text into the caption of a new link. If the clipboard contains a recognisable link, also fill in the braces for the target. Cmd/Ctrl+F : Opens the search popup inside the editor that has currently focus (either the main editor or a Quicklook window). Ctrl+Alt+F (Windows/Linux) Cmd+Alt+R (macOS): Insert a new footnote at the current cursor position. Cmd/Ctrl+L : Generate a new ID using the generator pattern from the settings dialog and insert it at the current cursor position. Cmd/Ctrl+0 : Re-set the font-size of the editor to standard. Cmd+Plus (macOS) Ctrl+Shift+Plus (Windows/Linux): Increase the editor font size. Cmd/Ctrl+Minus : Decrease the editor font size. Tab : Indent a list. Shift-Tab : Outdent a list. Shift-Enter : When editing a footnote, saves the reference text. Otherwise it will prevent auto-insertion of a new list item. Ctrl-Enter : Insert a line below the one your cursor is currently in, and place the cursor at the beginning of it. Ctrl-Shift-Enter : Insert a line above the one where your cursor is currently, and place the cursor at the beginning of it.","title":"Editor-related shortcuts"},{"location":"shortcuts/#preview-related-shortcuts","text":"Arrow Up : Open the previous file. Arrow Down : Open the next file. Cmd/Ctrl+Arrow Up : Jump to the top of the list. Cmd/Ctrl+Arrow Down : Jump to the bottom of the list.","title":"Preview-related shortcuts"},{"location":"shortcuts/#popup-related-shortcuts","text":"ESC : If any text field inside the popup has focus, pressing Escape will close the popup. In the search popup of the main editor Return : While the search textfield is focused, it will select the next occurrence of your search term. While the replace textfield is focused, it will replace the next occurrence of your search term with the replacement text and automatically search for the next occurrence. Alt+Return : While the replace textfield is focused, this will replace all occurrences of your search term with the replacement text.","title":"Popup-related shortcuts"},{"location":"spell-checking/","text":"Dictionaries & Spell Checking \u00b6 As with all modern writing app, Zettlr features a powerful spell checking engine at its heart. It is deactivated by default, as many users still would like to separate spell checking from the actual writing process, but you can activate it with ease. Additionally, Zettlr allows you to check against multiple languages at once, making it the ideal tool for writing bilingual texts (for instance, an English journal paper with some German quotations). Activate spell checking \u00b6 To activate spell checking, open the preferences using either the menu item, the toolbar button or pressing Cmd/Ctrl+, . In the Editor tab, you can then select all dictionaries you would like to activate. To the left there is a list displaying all available dictionaries. Click one to move it to the right, where green ribbons indicate all active dictionaries. Click one of these green ribbons to deactivate the dictionary again. You can filter the list of available dictionaries by typing a search key into the upper text field. Zettlr will automatically hide all dictionaries whose name does not contain your search string. Remove any letters from the search field to display all dictionaries again. After saving the settings with your new spell checking configuration, Zettlr will automatically begin to load all dictionaries. You may experience some lag while Zettlr boots up the dictionaries; especially with huge dictionaries such as the Italian or German languages this may take some time. After you quit the app, Zettlr will load the dictionaries on each start after a short delay. Deactivate spell checking \u00b6 To deactivate spell checking again, simply remove all active dictionaries by clicking all green ribbons on the right side of the Editor tab in the preferences window. If there are none activated, Zettlr won't attempt to perform spell checking on your texts. Custom Dictionary \u00b6 From version 1.3.0 onward, Zettlr supports adding certain words to your user defined dictionary. Especially for names this is useful, as you can then mark them as correct to remove the small red line underneath those names. To add a word to the user dictionary, simply right-click a marked word or name, and select \"Add to Dictionary\". Zettlr will then never mark this word as wrong again. Add new Dictionaries \u00b6 While Zettlr ships with several dictionaries on install, you may want to add new dictionaries for languages that you write in. To add such dictionaries, you'll need to search for hunspell-compatible dictionaries. Basically, these consist of folders containing two files -- a .dic -file and an .aff -file. The .dic -file contains all words in a language with so-called affixes, e.g. small flags that tell the algorithm that a certain word, for instance, may also feature a different ending (take for instance the word ending -- while the stem is \"end\", there may be both the words \"ends\", and \"ending\" available in the language -- the affix flag would then indicate \"this word can also have the -ing -ending!\"). The .aff -file contains the definitions of these flags. So to add these dictionaries, go online to search for some. A good starting point is this repository by the GitHub user wooorm , which features a lot of languages. Simply download one of the folders to your computer. Then, in Zettlr, click File -> \"Import Dictionary \u2026\". This will open up your computer's file browser with the dict -folder in Zettlr open. Copy the whole dictionary folder that you just downloaded into the dict -folder. Then you can select this dictionary from the settings. Bear in mind that Zettlr will perform some basic tests to determine whether or not a dictionary is valid. To have Zettlr display the dictionary and being able to select it, the dictionary must follow the following rules: The folder containing the .dic - and .aff -files must be named using the corresponding BCP-47 tag of the language the dictionary contains. Although you may not be aware of the term \"BCP-47\", it's simply the common language tag, so for instance a German dictionary would be named de-DE (for German German) or de-CH (for Swiss German), or simply it (for Italian). A complete list of all available languages can be found here . Inside this folder, at least two files must be present: a .dic -file and a .aff -file. These must be named either using the BCP-47 tag of the folder, or index.dic / index.aff . The dictionary folder may contain other files (such as a list of authors, or a LICENSE). These will be ignored. To sum up, Zettlr will make sure a dictionary is valid by checking that the following paths exist: bcp-47/bcp-47.dic and bcp-47/bcp-47.aff or bcp-47/index.dic and bcp-47/index.aff Attention: The hunspell algorithms implemented in JavaScript are still not as powerful as the main algorithm used by LibreOffice, so it may very well be that some dictionaries simply prove to be too large to be loaded. If Zettlr hangs after loading a dictionary, simply force-quit the app and make sure the dictionary is deselected.","title":"Dictionaries & Spell Checking"},{"location":"spell-checking/#dictionaries-spell-checking","text":"As with all modern writing app, Zettlr features a powerful spell checking engine at its heart. It is deactivated by default, as many users still would like to separate spell checking from the actual writing process, but you can activate it with ease. Additionally, Zettlr allows you to check against multiple languages at once, making it the ideal tool for writing bilingual texts (for instance, an English journal paper with some German quotations).","title":"Dictionaries &amp; Spell Checking"},{"location":"spell-checking/#activate-spell-checking","text":"To activate spell checking, open the preferences using either the menu item, the toolbar button or pressing Cmd/Ctrl+, . In the Editor tab, you can then select all dictionaries you would like to activate. To the left there is a list displaying all available dictionaries. Click one to move it to the right, where green ribbons indicate all active dictionaries. Click one of these green ribbons to deactivate the dictionary again. You can filter the list of available dictionaries by typing a search key into the upper text field. Zettlr will automatically hide all dictionaries whose name does not contain your search string. Remove any letters from the search field to display all dictionaries again. After saving the settings with your new spell checking configuration, Zettlr will automatically begin to load all dictionaries. You may experience some lag while Zettlr boots up the dictionaries; especially with huge dictionaries such as the Italian or German languages this may take some time. After you quit the app, Zettlr will load the dictionaries on each start after a short delay.","title":"Activate spell checking"},{"location":"spell-checking/#deactivate-spell-checking","text":"To deactivate spell checking again, simply remove all active dictionaries by clicking all green ribbons on the right side of the Editor tab in the preferences window. If there are none activated, Zettlr won't attempt to perform spell checking on your texts.","title":"Deactivate spell checking"},{"location":"spell-checking/#custom-dictionary","text":"From version 1.3.0 onward, Zettlr supports adding certain words to your user defined dictionary. Especially for names this is useful, as you can then mark them as correct to remove the small red line underneath those names. To add a word to the user dictionary, simply right-click a marked word or name, and select \"Add to Dictionary\". Zettlr will then never mark this word as wrong again.","title":"Custom Dictionary"},{"location":"spell-checking/#add-new-dictionaries","text":"While Zettlr ships with several dictionaries on install, you may want to add new dictionaries for languages that you write in. To add such dictionaries, you'll need to search for hunspell-compatible dictionaries. Basically, these consist of folders containing two files -- a .dic -file and an .aff -file. The .dic -file contains all words in a language with so-called affixes, e.g. small flags that tell the algorithm that a certain word, for instance, may also feature a different ending (take for instance the word ending -- while the stem is \"end\", there may be both the words \"ends\", and \"ending\" available in the language -- the affix flag would then indicate \"this word can also have the -ing -ending!\"). The .aff -file contains the definitions of these flags. So to add these dictionaries, go online to search for some. A good starting point is this repository by the GitHub user wooorm , which features a lot of languages. Simply download one of the folders to your computer. Then, in Zettlr, click File -> \"Import Dictionary \u2026\". This will open up your computer's file browser with the dict -folder in Zettlr open. Copy the whole dictionary folder that you just downloaded into the dict -folder. Then you can select this dictionary from the settings. Bear in mind that Zettlr will perform some basic tests to determine whether or not a dictionary is valid. To have Zettlr display the dictionary and being able to select it, the dictionary must follow the following rules: The folder containing the .dic - and .aff -files must be named using the corresponding BCP-47 tag of the language the dictionary contains. Although you may not be aware of the term \"BCP-47\", it's simply the common language tag, so for instance a German dictionary would be named de-DE (for German German) or de-CH (for Swiss German), or simply it (for Italian). A complete list of all available languages can be found here . Inside this folder, at least two files must be present: a .dic -file and a .aff -file. These must be named either using the BCP-47 tag of the folder, or index.dic / index.aff . The dictionary folder may contain other files (such as a list of authors, or a LICENSE). These will be ignored. To sum up, Zettlr will make sure a dictionary is valid by checking that the following paths exist: bcp-47/bcp-47.dic and bcp-47/bcp-47.aff or bcp-47/index.dic and bcp-47/index.aff Attention: The hunspell algorithms implemented in JavaScript are still not as powerful as the main algorithm used by LibreOffice, so it may very well be that some dictionaries simply prove to be too large to be loaded. If Zettlr hangs after loading a dictionary, simply force-quit the app and make sure the dictionary is deselected.","title":"Add new Dictionaries"},{"location":"virtual-directories/","text":"Virtual Directories \u00b6 Virtual Directories are a powerful feature of Zettlr that let you sort and collect files arbitrarily. They work as some kind of a box in which you can put files manually. Creating virtual directories \u00b6 Virtual directories represent subsets of a certain directory. You can create them by right-clicking any directory and select \"New Virtual Directory\u2026\". You can then give them a name just as you would do with any other directory. The same rules apply for virtual directory names as do for regular directories; not only to maintain a consistent look throughout the app, but also to be sure that the name is \" JSON -safe\". Virtual directories then appear as subdirectories of the directory, in which you have created them. They will remain above all other subdirectories, making it easier for you to find them. Also, they are indicated by a small box-icon and are coloured differently than normal directories, indicating their special status. Adding, removing and working with files \u00b6 After you have created a virtual directory, it acts mostly as a normal directory. You can drop files on them, rename and remove them. Yet, a noteworthy restriction applies: You can only add files that reside inside the directory in which you created the virtual directory. As virtual directories are supposed to represent subsets of a specific directory, that means that you cannot add files that are located outside of the directory. To remove files, right-click them inside the virtual directory (i.e. right click their purple representation, not the file itself!) and then select the option \"Delete from virtual directory.\" Inside virtual directory, all operations of files are permitted, even moving them to different directories. If you rename a file inside a virtual directory, this change will be reflected both on disk (i.e. in their \"actual\" directory) and in the virtual directory. If you remove a file completely, it will also be removed from all virtual directories, in which it may have been. Other restrictions of virtual directories \u00b6 Among not being able to hold files outside of their containing directory, a number of additional restrictions apply to working with virtual directories. You cannot move them since they are bound to the directory, in which you create them. Virtual directories are persistent (i.e. stored on disk), but of course not as a kind of directory. They are stored in a so-called Dot-file , which bears some problems. First of all: on Windows systems you will always see the .ztr-virtual-directory -file, because Windows does not hide such files as all other systems. Secondly, many cloud services do not synchronise Dot-files out of security reasons (for instance, you have to explicitly tell Nextcloud-clients to sync Dot-files). This means that if you store your files using a cloud service to access them from multiple devices, chances are your virtual directories are not transferred.","title":"Virtual Directories"},{"location":"virtual-directories/#virtual-directories","text":"Virtual Directories are a powerful feature of Zettlr that let you sort and collect files arbitrarily. They work as some kind of a box in which you can put files manually.","title":"Virtual Directories"},{"location":"virtual-directories/#creating-virtual-directories","text":"Virtual directories represent subsets of a certain directory. You can create them by right-clicking any directory and select \"New Virtual Directory\u2026\". You can then give them a name just as you would do with any other directory. The same rules apply for virtual directory names as do for regular directories; not only to maintain a consistent look throughout the app, but also to be sure that the name is \" JSON -safe\". Virtual directories then appear as subdirectories of the directory, in which you have created them. They will remain above all other subdirectories, making it easier for you to find them. Also, they are indicated by a small box-icon and are coloured differently than normal directories, indicating their special status.","title":"Creating virtual directories"},{"location":"virtual-directories/#adding-removing-and-working-with-files","text":"After you have created a virtual directory, it acts mostly as a normal directory. You can drop files on them, rename and remove them. Yet, a noteworthy restriction applies: You can only add files that reside inside the directory in which you created the virtual directory. As virtual directories are supposed to represent subsets of a specific directory, that means that you cannot add files that are located outside of the directory. To remove files, right-click them inside the virtual directory (i.e. right click their purple representation, not the file itself!) and then select the option \"Delete from virtual directory.\" Inside virtual directory, all operations of files are permitted, even moving them to different directories. If you rename a file inside a virtual directory, this change will be reflected both on disk (i.e. in their \"actual\" directory) and in the virtual directory. If you remove a file completely, it will also be removed from all virtual directories, in which it may have been.","title":"Adding, removing and working with files"},{"location":"virtual-directories/#other-restrictions-of-virtual-directories","text":"Among not being able to hold files outside of their containing directory, a number of additional restrictions apply to working with virtual directories. You cannot move them since they are bound to the directory, in which you create them. Virtual directories are persistent (i.e. stored on disk), but of course not as a kind of directory. They are stored in a so-called Dot-file , which bears some problems. First of all: on Windows systems you will always see the .ztr-virtual-directory -file, because Windows does not hide such files as all other systems. Secondly, many cloud services do not synchronise Dot-files out of security reasons (for instance, you have to explicitly tell Nextcloud-clients to sync Dot-files). This means that if you store your files using a cloud service to access them from multiple devices, chances are your virtual directories are not transferred.","title":"Other restrictions of virtual directories"},{"location":"zkn-method/","text":"The Zettelkasten method \u00b6 The idea to write Zettlr came to my mind several years ago, when we were trying to elaborate on good workflows for academic writing. We tested a lot of different styles and workflow ideas, and one that stuck was the Zettelkasten method. The problem back then was that most of the software did not really succeed in implementing it, but since there has been a lot of effort put into integrating the method, so that nowadays there are more and more applications that support some functions of this method. Originally, the method stems from the German sociologist Niklas Luhmann, who, in an effort to remember everything he's ever read or thought, designed his own (back then analogue) Zettelkasten containing cards with some information and numbers on them. The numbers could be used to locate other cards with other information that was in some way related to the content of the card. This was a way for Luhmann to reference back and forth between a set of cards and, as the box filled up with more and more cards, allowed it to somehow get \"alive\", showing him connections between certain concepts that he himself had not thought about. The basic idea, therefore, is to let you create relationships between small notes (or, for that matter, also long files) that enable you not only to move back and forth between files, but also to identify relationships that emerge in your files. Manage a Zettelkasten with Zettlr \u00b6 Three functions are currently available in Zettlr to kickstart your Zettelkasten: Generating Identifications for files Linking searches and files Tagging files File identification \u00b6 One of the biggest problems in writing apps that try to leave files untouched with app-specific stuff is that you need a way to identify files. Internally, Zettlr uses 32Bit-Hashes to identify specific files. But these depend on the paths, and, as Zettlr is designed to work even with cloud-saved files, the path on one computer will not be the same as on another computer, making the hash unusable as an ID. The second difficulty is offered by the format itself: Markdown files are plain text and therefore don't allow for all too much metadata to be added. Of course there have been approaches to integrate headers into markdown files, but this really was not the way to go, because this would jeopardise the rule of Zettlr to write agnostic markdown files. Metadata is way less standardised than the Markdown syntax itself, making it hard to imagine how that could work together with the philosophy of Zettlr. The solution we came up with is to simply bury IDs somewhere in the text. To add an ID to a file, simply press Cmd/Ctrl+L to generate one, or, if you prefer to do it manually, simply type an ID yourself. The ID will automatically be highlighted for you. Take a look at the Settings page to see options on how to customise all Zettelkasten functionality to your liking. The default ID is a good call, because it uses the date in the format YYYYMMDDHHMMSS, which is unique to the second. Also, our own experiences show that when one doesn't use easy-to-recognise IDs, one is less prone to assume stuff, making them better suited to cross-link files. Just try it yourself! Zettlr will automatically try to find an ID for a file by searching through its contents. If it has found an ID that is not encapsulated by a Wiki-Link (more on that below), it will assume this ID internally to refer to the file. If there is more than one valid ID in the file, the first ID will take prevalence . This way, even in long files, if you can't find the ID, simply drop a new ID on top of the file to make this assume the role of a general ID for the file. Internal linking \u00b6 Once the problem of Identification was solved, another occurred: How to link files across the app without jeopardising the above-mentioned aims of Zettlr to make files application-independent? Many apps, such as nvALT or The Archive implement an internal linking system that makes it possible to reference files from each other to make navigation through the system as easy as possible. Zettlr also includes such a system. An internal link is written with the syntax of [[This is the link]] . If you Alt - or Ctrl -click a link, it will trigger two distinct functions. First, it will try to find an exact match of the link's contents in the app. This means that it tries to find a file that reports that the content perfectly matches it. Such an exact match can be found in two ways: First, if the contents of the link (in the above example \"This is the link\") exactly matches a filename, excluding its extension, the appropriate file will report that it is indeed an exact match. The above example would exactly match the files This is the link.md , This is the link.markdown and This is the link.txt . Note that the filename matching is done case-insensitive . macOS for instance is by default case insensitive (so filename.md would match the same file as FILENAME.MD ). The second way that such a link may yield an exact match would be if the link's contents contain an ID in the format [[<your-id>]] . If any file has the ID <your-id> , Zettlr will also yield an exact match. If an exact match is found somewhere in the system, an Alt-Click on an internal link will immediately open the first matched file . This means that you can use such links to navigate through your system. You could, for example, accommodate this by creating index files that contain internal links to several files, and in each file, place a link that back-links to the respective index file. The second function triggered by such a link is a global search inside your currently selected directory. It will merely take the link contents, place it in your search field and automatically \"press Enter\", to initiate the search. This way you can not only open exact files, but also find all other files that link to the file you just opened. So a link in the format [[<your-id>]] would open that specific file and also search for all files that link back to this file. Tagging \u00b6 Tagging may be the easiest form of internal searching. If you Alt - or Ctrl -Click on a tag, this will simply render a search for all files in your current directory that are tagged with this tag. As tags in the form #keyword are not used anywhere in the markdown syntax, using this approach enables Zettlr to use such tags as the perfect means to create a tagging system.","title":"The Zettelkasten method"},{"location":"zkn-method/#the-zettelkasten-method","text":"The idea to write Zettlr came to my mind several years ago, when we were trying to elaborate on good workflows for academic writing. We tested a lot of different styles and workflow ideas, and one that stuck was the Zettelkasten method. The problem back then was that most of the software did not really succeed in implementing it, but since there has been a lot of effort put into integrating the method, so that nowadays there are more and more applications that support some functions of this method. Originally, the method stems from the German sociologist Niklas Luhmann, who, in an effort to remember everything he's ever read or thought, designed his own (back then analogue) Zettelkasten containing cards with some information and numbers on them. The numbers could be used to locate other cards with other information that was in some way related to the content of the card. This was a way for Luhmann to reference back and forth between a set of cards and, as the box filled up with more and more cards, allowed it to somehow get \"alive\", showing him connections between certain concepts that he himself had not thought about. The basic idea, therefore, is to let you create relationships between small notes (or, for that matter, also long files) that enable you not only to move back and forth between files, but also to identify relationships that emerge in your files.","title":"The Zettelkasten method"},{"location":"zkn-method/#manage-a-zettelkasten-with-zettlr","text":"Three functions are currently available in Zettlr to kickstart your Zettelkasten: Generating Identifications for files Linking searches and files Tagging files","title":"Manage a Zettelkasten with Zettlr"},{"location":"zkn-method/#file-identification","text":"One of the biggest problems in writing apps that try to leave files untouched with app-specific stuff is that you need a way to identify files. Internally, Zettlr uses 32Bit-Hashes to identify specific files. But these depend on the paths, and, as Zettlr is designed to work even with cloud-saved files, the path on one computer will not be the same as on another computer, making the hash unusable as an ID. The second difficulty is offered by the format itself: Markdown files are plain text and therefore don't allow for all too much metadata to be added. Of course there have been approaches to integrate headers into markdown files, but this really was not the way to go, because this would jeopardise the rule of Zettlr to write agnostic markdown files. Metadata is way less standardised than the Markdown syntax itself, making it hard to imagine how that could work together with the philosophy of Zettlr. The solution we came up with is to simply bury IDs somewhere in the text. To add an ID to a file, simply press Cmd/Ctrl+L to generate one, or, if you prefer to do it manually, simply type an ID yourself. The ID will automatically be highlighted for you. Take a look at the Settings page to see options on how to customise all Zettelkasten functionality to your liking. The default ID is a good call, because it uses the date in the format YYYYMMDDHHMMSS, which is unique to the second. Also, our own experiences show that when one doesn't use easy-to-recognise IDs, one is less prone to assume stuff, making them better suited to cross-link files. Just try it yourself! Zettlr will automatically try to find an ID for a file by searching through its contents. If it has found an ID that is not encapsulated by a Wiki-Link (more on that below), it will assume this ID internally to refer to the file. If there is more than one valid ID in the file, the first ID will take prevalence . This way, even in long files, if you can't find the ID, simply drop a new ID on top of the file to make this assume the role of a general ID for the file.","title":"File identification"},{"location":"zkn-method/#internal-linking","text":"Once the problem of Identification was solved, another occurred: How to link files across the app without jeopardising the above-mentioned aims of Zettlr to make files application-independent? Many apps, such as nvALT or The Archive implement an internal linking system that makes it possible to reference files from each other to make navigation through the system as easy as possible. Zettlr also includes such a system. An internal link is written with the syntax of [[This is the link]] . If you Alt - or Ctrl -click a link, it will trigger two distinct functions. First, it will try to find an exact match of the link's contents in the app. This means that it tries to find a file that reports that the content perfectly matches it. Such an exact match can be found in two ways: First, if the contents of the link (in the above example \"This is the link\") exactly matches a filename, excluding its extension, the appropriate file will report that it is indeed an exact match. The above example would exactly match the files This is the link.md , This is the link.markdown and This is the link.txt . Note that the filename matching is done case-insensitive . macOS for instance is by default case insensitive (so filename.md would match the same file as FILENAME.MD ). The second way that such a link may yield an exact match would be if the link's contents contain an ID in the format [[<your-id>]] . If any file has the ID <your-id> , Zettlr will also yield an exact match. If an exact match is found somewhere in the system, an Alt-Click on an internal link will immediately open the first matched file . This means that you can use such links to navigate through your system. You could, for example, accommodate this by creating index files that contain internal links to several files, and in each file, place a link that back-links to the respective index file. The second function triggered by such a link is a global search inside your currently selected directory. It will merely take the link contents, place it in your search field and automatically \"press Enter\", to initiate the search. This way you can not only open exact files, but also find all other files that link to the file you just opened. So a link in the format [[<your-id>]] would open that specific file and also search for all files that link back to this file.","title":"Internal linking"},{"location":"zkn-method/#tagging","text":"Tagging may be the easiest form of internal searching. If you Alt - or Ctrl -Click on a tag, this will simply render a search for all files in your current directory that are tagged with this tag. As tags in the form #keyword are not used anywhere in the markdown syntax, using this approach enables Zettlr to use such tags as the perfect means to create a tagging system.","title":"Tagging"}]}